{
  "hash": "13c5bc95d6c33c69c4b3798897e4836b",
  "result": {
    "markdown": "---\ntitle: \"Creating a website using mkdocs, Rmarkdown and GitHub pages\"\ndescription: |\n   A posible solution for note takers (and those who need to organize your documentation) with mkdocs and Rmarkdown.\nauthor:\n  - name: \"Ronny A. Hernandez Mora\"\n    url: \"https://ronnyale.com\"\n    affiliations: \n      - name: \"ixpantia\"\n        url: \"https://www.ixpantia.com\"\ndate: 2022-01-13\nlicence: \"CC BY-NC\"\nimage: images/structure.png\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# ---\n# title: \"Creating a website using mkdocs, Rmarkdown and GitHub pages\"\n# description: |\n#   A posible solution for note takers (and those who need to organize your documentation) with mkdocs and Rmarkdown.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/ \n# date: 2022-01-13\n# creative_commons: CC BY-NC\n# preview: images/site_alive.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---\n```\n:::\n\n\n\n\n## What are we going to create?\n\nA static web page like [this one](https://ronnyhdez.github.io/drawer/) to manage\nyour documentation created in [Rmarkdown](https://rmarkdown.rstudio.com/)\n\n## The problem:\n\nPretty often I found myself in situation where I say: \"I did this sometime ago\nand now I don't remember quite well which were the steps to do it again\".\n\nFrom my job and also current projects I'm always taking raw notes in a text file\nfile and despite the tons of apps out there, I like text files because they\nare pretty simple and this allows me to just focus in writing down the idea,\nconcept or steps of what I'm doing and implement markdown.\n\nBut, the problem with this approach is that at the end of the day, I have my\ndesktop or other folders with a lot of individual `.md` or `txt` files laying \naround without any intuitive context. This got me in troubles and in loosing \ntime when I wanted to get back to something that I did and that I had somewhere \nin my computer.\n\nIf at this point your are asking yourself: why you didn't use a wiki? or a \nvignette? or an Rmarkdwon file? or something more organized? The answer is simple:\nIn the middle of a project execution, when I doubt about something, I would go to\ngoogle or a reference book, grab what I needed and take a quick note about the\nsteps that I followed to accomplish my task. If it didn't work I would throw away\nthe file, if it worked, I would keep the file.\n\nThen, I found out about [MkDocs](https://www.mkdocs.org/) (actually [Frans](https://twitter.com/fransvandunne)\nwas who showed me this) and it was the perfect solution: a simple web page,\nan index and most important: a search toolbar that can search in all the web\npage content (I mean, all my notes in there)!\n\n\n![](images/mkdocs_example.jpg)\n\nAs they state in their site: \n\n> MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\n\nNow, they state that **source files are written in Markdown**, but if I'm an\nR user, probably I'm used to Rmarkdown files. Plus it's nice to create documents\nin Rmarkdown where I can mix markdown and R code (R + markdown).\n\n## So, how can I set up everything?\n\nFor this recipe, you will need:\n\n - R and RStudio\n - Rmarkdown package\n - MkDocs\n - git\n - GitHub account\n \nI'm not going to describe how to install R RStudio, Rmarkdown or git. There are \nplenty good tutorials and documentation on how to do it out there. I'm going\nto describe the process from the installation of MkDocs.\n\n### Getting MkDocs\n\nFor this, I followed the instructions over [here](https://www.mkdocs.org/user-guide/installation/).\nI got already python on my machine and I'm a Linux user, so I'm using \nUbuntu 20.04\n\nGiven that I had already python I just installed MkDocs:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install mkdocs\n```\n:::\n\n\nThen I validated that the installation was succesful:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ mkdocs --version\nmkdocs, version 1.2.2 from /home/your_username/.local/lib/python3.8/site-packages/mkdocs (Python 3.8)\n```\n:::\n\n\nDone! I got MkDocs on my computer.\n\n### Getting Matherial theme\n\nI don't like the default theme that comes with MkDocs, so I changed to \n[Matherial](https://squidfunk.github.io/mkdocs-material/getting-started/).\n\nTo install this theme, you will need to run in the terminal:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n$ pip3 install mkdocs-material\n```\n:::\n\n\n### Configuring your GitHub repository\n\nYou will need to have an account already on GitHub. When you are done with this\nstep, you can go and create a repository. Also you will need to go to \nsettings, search for **Pages** on the left hand side menu and there select the\n**main** branch to enable GitHub Pages for your repository.\n\nThe steps are the following:\n\n**Create a new repository**\n\n![](images/01_new_repo.png)\n\n\n**Options for the new repo**\n\n![](images/02_create_new_repo.png)\n\n**Settings to enable GitHub pages**\n\n![](images/setting_gh_pages.png)\n\n## Cloning your project\n\nIf you are already familiar with this step, skip this section and go ahead to \nthe next session. If you are starting with git and GitHub here is the set of \nsteps to clone your repo and start working.\n\nUp to this point we just have created the repository on GitHub and tweak \nsome settings. It's time to clone the repository created on GitHub to our\ncomputer. We will be working with the RStudio IDE.\n\n**Create new project**\n\n - Select the `Version Control` option\n![](images/01-clone.png)\n\n - Then select the `Git` option\n![](images/02-clone.png)\n\n - Now, go to your repository on GitHub and under the `Code` button copy the\n url. Make sure that the `HTTPS` option is highlighted.\n![](images/03-clone.png)\n\n - Copy the URL in the `Repository URL` section. The `Project directory name` should\n auto-populate. Then select your path where you want to locate your repository\n folder.\n![](images/04-clone.png)\n\n - Now, RStudio should open a new session for working on your repository!\n \n## Working on your notes\n\nNow we are all set. We can start creating our Rmarkdown documents:\n\n![](images/01-notes.png)\n\nCreate as many `Rmd` documents as you need. Each document will be a \"section\"\non your final website. \n\nEach of the titles and subtitles in your document will be sections inside the\nspecific page.\n\nAlso, use relative paths. This will make everything less error prone. \n\nNow, because we are going to use the package [docmaker](https://github.com/ronnyhdez/docmaker)\nwe need to follow a structure:\n\n - All your `Rmd` files should be in the root of your project.\n - Your data, images, pdfs files can be saved inside folders.\n - **Don't use `docs` folder**. This is a special folder designated to save the\n files needed to build the web page. `docmaker` package will be in charge of \n the use of this folder, so you don't have to worry about it.\n \nYour files in your repository should look something like this:\n\n![](images/03-notes.png)\n \n### `.gitignore` advice\n\nIn order to not make your control version slow or run out of space in your\nGitHub account, ignore some files writing them in your `.gitignore` file.\n\nJust open that file in RStudio and add the following lines to not include images,\ndata, credentials or other files that are not necessary for control versioning:\n\n![](images/04-notes.png)\n\nIn there I added:\n\n```\n# Personal files\ndata/\nimages/\n*.html\n.Renviron\n```\n### Sending your changes to your github repository.\n\nFor this example I'm not using branches to avoid focusing on the git details, so\nwe are just going to send everything to the main branch. This step is\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add .\ngit commit -m \"Add first notes\"\ngit push\n```\n:::\n\n\nBe aware that this is probably going to ask you for who you are (user name on\nGitHub and email) and your credentials. One tip to save your credentials for\nthe specific repository that you are working on is the following command after\nyou enter your credentials:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config credential.helper store\n```\n:::\n\n\n## Deploy and publish your notes with `docmaker`\n\nSo far, we have our notes. But we are still lacking the part of publishing in\nour web page the notes. There are several steps to do this manually but after\nmany times repeating everything I decided to create a small R package to\nautomatize this steps. This package is called [dockmaer](https://github.com/ronnyhdez/docmaker)\n\nYou can install the package with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"ronnyhdez/docmaker\")\n```\n:::\n\n\nNow, on your console you can load the package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(docmaker)\n```\n:::\n\n\n### Configure repo with `docmaker`\n\nBefore building and deploying our notes, we need to do some configuration steps\nin our repository. `docmaker` can take care of this with the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_repo(github_page_url = \"https://ronnyhdez.github.io/test_docmaker/\",\n           site_author = \"Ronny A. Hernández Mora\")\n```\n:::\n\n\nWe can get the URL of our repository in the settings > page on GitHub. After\nwe enabled this in a step before, there should appear the URL designated by\nGitHub for our web site.\n\n![](images/page_url.png)\n\nThe `site_author` should be our name.\n\nThis function will do the following:\n\n - Create a `yml` file\n - Add to the `.gitignore` the `site` folder\n - Create a `docs` folder\n\n### Build and deploy notes\n\nBecause this is our first time, all of our notes (three in the example) are not\nexisting as `md` documents nor even built or deploy with mkdocs.\n\n`docmaker` have a function to take **all the .Rmd files** existing in our project\nroot and do all the steps needed to deploy this ones:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_all_docs(deploy = TRUE)\n```\n:::\n\n\nThis function will do the following:\n\n - Render all our `Rmd` files to `md`\n - Move the outputs (including images) to the `docs` folder\n - If we are using a `README.Rmd` file **this will be ignore**\n - Build the mkdocs\n - If `deploy` is set to `TRUE` it will deploy the notes.\n - Create an specifi branch for the pages deployment: `gh-deploy`\n \nNow, given that we are using a new branch to be deployed, we need to go back to\nGitHub pages and make a small change: change the branch selected to be build from:\n\n![](images/gh_deploy.png)\n\nAfter some seconds (or a few minutes), we should be able to see our site alive!\n\n\n![](images/site_alive.png)\n\nAs we can see, our 3 files are sections in the left side menu. The titles and\nsubtitles of each document will be shown in the **Table of contents** in the\nright side menu.\n\n## Code and example site\n\nAll the code and configuration files of the example site are in this GitHub\nrepository:\n\n - [Repository](https://github.com/ronnyhdez/test_docmaker)\n - [Site](https://ronnyhdez.github.io/test_docmaker/03-nicoya/)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}