{
  "hash": "3bc5c1089691fc4b7d15512b74a6e4b1",
  "result": {
    "markdown": "---\ntitle: \"Configuring nvim with Lua and packer for R\"\ndescription: |\n   A blogpost on how to configure nvim with Lua to work with R.\ndate: 2023-06-18\ncategories: [Neovim, Linux, R, Lua, packer]\nlicence: \"CC BY-NC\"\nimage: images/keyboard.png\n---\n\n\n\n\n# What are we going to do?\n\nIn this blogpost, I will guide you through the process of installing Neovim on \nUbuntu 22.04, configuring it with Lua, and using Packer as a plugin manager. Our\ngoal is to create an optimized setup that allows for smooth R programming from \nthe terminal.\n\nIf you have previously read my [blogposts](https://ronnyhdez.github.io/blog/posts/2022-09-11-using-nvim-for-r-users/), you might be familiar with the \nconfiguration using [vim-plug](https://github.com/junegunn/vim-plug) for managing plugins.\nHowever, in this blogpost, we will take a different approach by utilizing Lua \nfor our Neovim configuration and Packer for plugin management. Lua provides a \nmore organized and flexible way to configure Neovim, while Packer simplifies the\ninstallation and management of plugins.\n\nLet's get started with the installation and configuration process. If you \nare familiar with some of the steps, feel free to jump ahead to the specific \nsections you need.\n\nBy the end of this tutorial, you will have a customized Neovim setup that \nenhances your R programming experience and boosts your productivity.\n\nOur results will be something similar to:\n\n![](images/final_result.png)\n\nOn next blogposts, I will describe how to take this further.\n\n# Installation and configuration\n\nSo, we need some software for this. Make sure that you have\n[git](https://git-scm.com/) installed on your workstation and of course, [R](https://docs.rstudio.com/resources/install-r/).\n\n\n## Files structure\n\nWe aim to have the following configuration files structure:\n\nIn the directory `~/.config/nvim`, we should have:\n\n```\n | - init.lua (Entry point for nvim)\n |\n | - lua/\n \t| - plugins.lua (For our packer plugins installations)\n \t| - settings.lua (Our general nvim configuration)\n |\n | - plugin/\n \t| - plugin_a.lua (Configurations for a determined plugin)\n \t| - plugin_b.lua (Configurations for a determined plugin)\n \t| - packer_compiled.lua (File generated automatically by Packer)\n```\n\nThis is not mandatory, but is one of the configurations that I find really nice\nto organize everything being specific on the aim of the instructions.\n\n## Installing Neovim\n\n 1. Open your terminal\n 2. Run the following command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt install neovim\n```\n:::\n\n\n## Configuring our nvim with lua\n\n 1. Create the config directory for nvim:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir /home/user_name/.config/nvim\n```\n:::\n\n\nRemember to replace `user_name` with your actual workstation user name.\n\n![Creating nvim directory in `.config`](images/mkdir_nvim.png)\n\n 2. Create the `init.lua` file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Create file\nnvim init.lua\n```\n:::\n\n\n 3. Add the following requirements:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Requirements\nrequire('plugins')\nrequire('settings')\n```\n:::\n\n\n![Include the requirements in the `init.lua` file](images/requirements.png)\nThese requirements reference the files that we are about to create: `plugins.lua`\nand `settings.lua`. Both files should be placed in the `lua/` directory.\n\nThe `init.lua` file acts as the entry point for loading the settings and plugins.\nIf you make changes to the plugins, such as adding a new one, you can revisit \nthe `init.lua` file and invoke `:PackerSync` to synchronize the plugins. However,\nfor now, you don't need to worry about this step.\n\n## Configuring General Settings for Lua\n\nAfter creating our `init.lua` file, it's time to configure the general settings\nto customize the behavior of the nvim editor according to our preferred style.\n\nTo organize these settings effectively, we will utilize the `lua/settings.lua`\nfile. This file will serve as a central location for all our general settings.\n\nTo set up the `lua/settings.lua` file, follow these steps:\n\n 1. Create the `lua/` directory inside the `nvim/` directory if it doesn't \n already exist:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir lua\n```\n:::\n\n\n 2. Create the settings.lua file within the lua/ directory.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnvim lua/settings.lua\n```\n:::\n\n\n Make sure that the file name matches the one specified in your init.lua \n file's requirements.\n\nWhen doing the step above, probably you will find an error:\n\n![Error message when modifyng the `settings.lua` file](images/error.png)\n\nSince we are currently in the process of creating the required files, it's \nnormal to encounter an error when Neovim tries to locate the non-existent files.\nHowever, this is not a cause for concern for now.\n\nConsider adding the following basic configuration options to the `settings.lua`\nfile:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvim.opt.number = true\nvim.opt.relativenumber = true\nvim.opt.ignorecase = true\nvim.opt.smartcase = true\nvim.opt.breakindent = true\nvim.opt.tabstop = 4\nvim.opt.shiftwidth = 4\nvim.opt.colorcolumn = \"80\"\n```\n:::\n\n\n![Settings for nvim in the file `settings.lua`](images/nvim_settings.png)\n\nThese configurations will enable line numbers, relative line numbers,\ncase-insensitive searching, smart case sensitivity, indentation on line breaks,\nset the tab width to 4 spaces, set the indent width to 4 spaces, and display a\ncolor column at column 80.\n\nFeel free to adjust these settings according to your preferences.\n\n## Installing packer\n\nTo install Packer, a plugin manager for Neovim, follow these steps:\n\n 1. Create the `plugins.lua` file inside the `lua` folder\n \n\n::: {.cell}\n\n```{.bash .cell-code}\nnvim lua/plugins.lua\n```\n:::\n\n\nAgain, you will find the same warning as above, but just hit enter.\n\n 2. Copy and paste the following code into the file. This code checks if Packer\n is already installed and, if not, it installs it automatically when you start\n Neovim.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n local ensure_packer = function()\n  local fn = vim.fn\n  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'\n  if fn.empty(fn.glob(install_path)) > 0 then\n    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})\n    vim.cmd [[packadd packer.nvim]]\n    return true\n  end\n  return false\nend\n\nlocal packer_bootstrap = ensure_packer()\n```\n:::\n\n\n![Packer code snippet for installation](images/packer.png)\n\nWith these code snippets in place, whenever you start Neovim, it will \nautomatically check if Packer is installed. If it's not found, it will be cloned\nfrom the official repository and set up for use.\n\nDon't close the file yet! We are going to add a couple of things more in the\nnext section.\n\n## Installing plugins\n\nNow you can proceed with adding the desired plugins to the `lua/plugins.lua`\nfile. Here we are going to add a couple, with special attention to `Nvim-R`.\n\n 1. Open the lua/plugins.lua file in your preferred text editor.\n\n 2. Inside the require('packer').startup(function() block, you can add the \n plugins you want to install. For example, let's add two plugins: gruvbox for a\n colorscheme and Nvim-R for R integration. Modify your lua/plugins.lua file as\n follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nreturn require('packer').startup(function()\n        -- packer can manage itself\n        use 'wbthomason/packer.nvim'\n\n        -- colorscheme\n        use 'gruvbox-community/gruvbox'\n        \n        -- nvim-r\n        use 'jalvesaq/Nvim-R'\n\nend)\n```\n:::\n\n \n 3. Save the changes to your lua/plugins.lua file.\n \nAfter adding the plugins, you can go back to your `init.lua` file and check if\neverything is correct. To install and update all the plugins, run the following\ncommand inside Neovim:\n \n\n::: {.cell}\n\n```{.bash .cell-code}\n:PackerSync\n```\n:::\n\n \nThis will trigger the installation and updating of your plugins.\n\nOnce the process is complete, you can quit Neovim by running `:q` in the Packer\nwindow and `:q` in the `init.lua` file.\n\nNow, your plugins should be successfully installed and ready to use in Neovim.\n\n## Configure settings for Nvim-R\n\nAt this point you should have the following structure:\n\n![File structure for our settings](images/tree.png)\n\nFor this, we need to create a file with the name of the plugin. We are going to \nconfigure a couple of settings for our nvim-r plugin.\n\n 1. Navigate to the `plugin/` folder in your Neovim configuration directory.\n 2. Create a new file called `nvimr.lua` inside the `plugin/` folder.\n 3. Open the `nvimr.lua` file and add the following configurations:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n-- To use spacebar for running code\nvim.cmd([[\n  let g:markdown_fenced_languages = ['r', 'python']\n  let g:rmd_fenced_languages = ['r', 'python']\n\n  if has(\"gui_running\")\n      inoremap <C-Space> <C-x><C-o>\n  else\n      inoremap <Nul> <C-x><C-o>\n  endif\n  vmap <Space> <Plug>RDSendSelection\n  nmap <Space> <Plug>RDSendLine\n]])\n\n\n-- R filetypes\nvim.cmd([[\nautocmd BufNewFile,BufRead *.Rmd set ft=rmd\nautocmd BufNewFile,BufRead *.rmd set ft=rmd\nautocmd BufNewFile,BufRead *.qmd set ft=rmd\n]])\n```\n:::\n\n\nThe above configurations will:\n\n - Set the fenced code block languages to 'r' and 'python' for R Markdown and \n quarto files.\n - Enable the space bar as a shortcut for running lines of code.\n - Set the key mapping `<Space>` for visual mode to send the selected lines to the\n R terminal.\n - Set the key mapping `<Space>` for normal mode to send the current line to the \n R terminal.\n - Set the filetypes to `rmd` for `.Rmd`, `.rmd`, and `.qmd` files.\n\nSave the changes to the `nvimr.lua` file.\n\nWith these settings in place, Nvim-R will be configured to enhance your workflow\nwith .rmd and .qmd files, providing a convenient way to run R code within Neovim.\n\n# Testing\n\nNow that we have everything installed, let's test if we can work with R from our\nterminal using Neovim.\n\n 1. Create a test .rmd file on your desktop. You can use the following command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnvim test.rmd\n```\n:::\n\n\n 2. In the test.rmd file, let's start with a simple function. Add a similar \n function:\n\n![Creating a `test.rmd` file](images/create_test.png)\n\n 3. To open the R console, press `\\rf`: \n\n![Opening R console with nvim-r](images/r_console.png)\n\n 4. Place your cursor in any line inside the chunk of the code and press the \n `spacebar` to send the line to the R console:\n\n![Running the R code!](images/run_code.png)\n\nWith all these steps, you just tested the integration of R with nvim. You can \nnow continue to explore and utilize the features provided by Nvim-R to enhance \nyour R coding experience within Neovim.\n\n# Workflow\n\nNow that we hace everything setup, is time to work with R from nvim. Check\nthis other [tutorial](https://ronnyhdez.github.io/blog/posts/2023-02-27-nvim-and-r/) with some of the most common and useful key bindings.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}