{
  "hash": "c615424c1fee360688a3e57bdde2acca",
  "result": {
    "markdown": "---\ntitle: \"Configuring nvim with Lua and packer for R\"\ndescription: |\n   A blogpost on how to configure nvim with Lua to work with R.\ndate: 2023-06-18\ncategories: [Neovim, Linux, R, Lua, packer]\nlicence: \"CC BY-NC\"\nimage: images/keyboard.png\n---\n\n\n\n\n# What are we going to do?\n\nIn this blogpost, I will guide you through the process of installing Neovim on \nUbuntu 22.04, configuring it with Lua, and using Packer as a plugin manager. Our\ngoal is to create an optimized setup that allows for smooth R programming from \nthe terminal.\n\nIf you have previously read my [blogposts](https://ronnyhdez.github.io/blog/posts/2022-09-11-using-nvim-for-r-users/), you might be familiar with the \nconfiguration using [vim-plug](https://github.com/junegunn/vim-plug) for managing plugins.\nHowever, in this blogpost, we will take a different approach by utilizing Lua \nfor our Neovim configuration and Packer for plugin management. Lua provides a \nmore organized and flexible way to configure Neovim, while Packer simplifies the\ninstallation and management of plugins.\n\nLet's get started with the installation and configuration process. If you \nare familiar with some of the steps, feel free to jump ahead to the specific \nsections you need.\n\nBy the end of this tutorial, you will have a customized Neovim setup that \nenhances your R programming experience and boosts your productivity.\n\nOur results will be something similar to:\n\n![](images/final_result.png)\n\nOn next blogposts, I will describe how to take this further.\n\n# Installation and configuration\n\nSo, we need some software for this. Make sure that you have\n[git](https://git-scm.com/) installed on your workstation, and of course, R.\n\n## Files structure\n\nWe aim to have the following configuration files structure:\n\nIn the directory `~/.config/nvim`, we should have:\n\n```\n | - init.lua (Entry point for nvim)\n |\n | - lua/\n \t| - plugins.lua (For our packer plugins installations)\n \t| - settings.lua (Our general nvim configuration)\n |\n | - plugin/\n \t| - plugin_a.lua (Configurations for a determined plugin)\n \t| - plugin_b.lua (Configurations for a determined plugin)\n \t| - packer_compiled.lua (File generated automatically by Packer)\n```\n\nThis is not mandatory, but is one of the configurations that I find really nice\nto organize everything being specific on the aim of the instructions.\n\n## Installing Neovim\n\n 1. Open your terminal\n 2. Run the following command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt install neovim\n```\n:::\n\n\n## Configuring our nvim with lua\n\n 1. Create the config directory for nvim:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir /home/user_name/.config/nvim\n```\n:::\n\n\nRemember to replace `user_name` with your actual workstation user name.\n\n 2. Create the `init.lua` file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Create file\nnvim init.lua\n```\n:::\n\n\n 3. Add the following requirements:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Requirements\nrequire('plugins')\nrequire('settings')\n```\n:::\n\n\nThese requirements reference the files that we are about to create: `plugins.lua`\nand `settings.lua`. Both files should be placed in the `lua/` directory.\n\nThe `init.lua` file acts as the entry point for loading the settings and plugins.\nIf you make changes to the plugins, such as adding a new one, you can revisit \nthe `init.lua` file and invoke `:PackerSync` to synchronize the plugins. However,\nfor now, you don't need to worry about this step.\n\n## Configure the general settings for lua\n \nAfter creating our `init.lua` file, it's time to establish configurations that \nalign the nvim editor with our preferred style.\n\nTo organize these settings effectively, we will utilize the `lua/settings.lua`\nfile. Here, we can include all of our general settings.\n\nConsider the following basic configuration options:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvim.opt.number = true\nvim.opt.relativenumber = true\nvim.opt.ignorecase = true\nvim.opt.smartcase = true\nvim.opt.breakindent = true\nvim.opt.tabstop = 4\nvim.opt.shiftwidth = 4\nvim.opt.colorcolumn = \"80\"\n```\n:::\n\n\n## Installing packer\n\nTo install Packer, a plugin manager for Neovim, follow these steps:\n\n 1. Open the lua/plugins.lua file.\n 2. Copy and paste the following code into the file. This code checks if Packer\n is already installed and, if not, it installs it automatically when you start\n Neovim.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n local ensure_packer = function()\n  local fn = vim.fn\n  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'\n  if fn.empty(fn.glob(install_path)) > 0 then\n    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})\n    vim.cmd [[packadd packer.nvim]]\n    return true\n  end\n  return false\nend\n\nlocal packer_bootstrap = ensure_packer()\n```\n:::\n\n\nWith these code snippets in place, whenever you start Neovim, it will \nautomatically check if Packer is installed. If it's not found, it will be cloned\nfrom the official repository and set up for use.\n\n## Installing plugins\n\nNow you can proceed with adding the desired plugins to the `lua/plugins.lua`\nfile. Here we are going to add a couple, with special attention to `Nvim-R`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n return require('packer').startup(function()\n        -- packer can manage itself\n        use 'wbthomason/packer.nvim'\n\n        -- colorscheme\n        use 'gruvbox-community/gruvbvox'\n        \n        -- nvim-r\n        use 'jalvesaq/Nvim-R'\n\nend)\n```\n:::\n\n \nSo, after this step, we can go back to our `init.lua` file and check if \neverything is correct.\n \n\n::: {.cell}\n\n```{.bash .cell-code}\n:PackerSync\n```\n:::\n\n \nIt should install and update all of our plugins\n \n## Configure settings for Nvim-R\n\nFor this, we need to create a file with the name of the plugin. We are going to configure\na couple of settings for our nvim-r plugin.\n\nIn the `plugin/` folder, create a new file called `nvimr.lua`.\n\nInside this file, we are going to setup some options to facilitate the work with\n `.rmd` or `.qmd` files. Also, I like to run the lines of code pressing the space\n bar, so we are going to configure that too.\n \n In the file you just created `nvimr.lua`, write the following:\n \n\n::: {.cell}\n\n```{.bash .cell-code}\n   vim.cmd([[                                                                      \n  1   let g:rmarkdown_fenced_languages = ['r', 'python']                            \n  2   let g:rmd_fenced_languages = ['r', 'python']                                  \n  3                                                                                 \n  4   if has(\"gui_running\")                                                         \n  5       inoremap <C-Space> <C-x><C-o>                                             \n  6   else                                                                          \n  7       inoremap <Nul> <C-x><C-o>                                                 \n  8   endif                                                                         \n  9   vmap <Space> <Plug>RDSendSelection                                            \n 10   nmap <Space> <Plug>RDSendLine                                                 \n 11 ]])                                                                             \n 12                                                                                 \n 13 --R filetypes                                                                   \n 14 vim.cmd([[                                                                      \n 15 autocmd BufNewFile,BufRead *.Rmd set ft=rmd                                     \n 16 autocmd BufNewFile,BufRead *.rmd set ft=rmd                                     \n 17 autocmd BufNewFile,BufRead *.qmd set ft=rmd                                     \n 18 ]]) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}