{
  "hash": "009f0cc0ef3e9c77b26d0ceabbbd46d5",
  "result": {
    "markdown": "---\ntitle: \"Using Neovim for R Users\"\ndescription: |\n   Are you an R User who wants to try nvim? \nauthor:\n  - name: \"Ronny A. Hernandez Mora\"\n    url: \"https://ronnyale.com\"\n    affiliations: \n      - name: \"ixpantia\"\n        url: \"https://www.ixpantia.com\"\ndate: 2022-09-13\nlicence: \"CC BY-NC\"\nimage: images/nvim_r.png\n---\n\n\n\n\n\n# How to install and config nvim in Ubuntu?\n\nThere is a ton of tutorials in the internet about this, but after trying\nseveral times, the steps that worked for me are the following:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt install neovim -y\n```\n:::\n\n\nThen you can validate the version with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnvim --version\n```\n:::\n\n\nNow that we have nvim installed in our computer, it's time to configure it.\nFirst you need to create the config file that would be in the path `~/.config/nvim/`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Create directory\nmkdir ~/.config/nvim/\ncd ~/.config/nvim/\n\n# Create nvim config file\nnvim init.vim\n```\n:::\n\n\nFrom there, you will see an empty file. We are going to add some configuration.\nThere are many options to adapt nvim to your needs and lots of examples out\nthere. Here I'm going to use a basic configuration so you can get an idea on\nwhat you can do.\n\nTo understand the file, take notes on this:\n\n - Every `\"` means that the line is a comment\n - All other lines without the `\"` are instructions to set your configuration\n - `Plug` means that you want to use a Plugin. You will need a plugin to manage\n these. (More on this later)\n\nThis is what a basic config file would look like:\n\n```\n\" Cursor as a block\nset guicursor=\n\n\" Use relative numbers in files\nset relativenumber\n\n\" Line where I'm positioned is the real line number\nset nu\n\n\" No saving or keeping buffer in the background\nset hidden\n\n\" Indentetation configuration\nset tabstop=4 softtabstop=4\nset shiftwidth=4\nset expandtab\nset smartindent\n\n\" Start scrolling until 8 spaces away\nset scrolloff=8\n\n\" Create extra column\nset signcolumn=yes\n\n\" Mark 80 characters line\nset colorcolumn=80\n\n\" Set encoding\nset encoding=utf-8\n\n\" Plugins\ncall plug#begin()\nPlug 'jalvesaq/Nvim-R'\nPlug 'preservim/nerdtree'\nPlug 'tpope/vim-fugitive'\nPlug 'ncm2/ncm2'\nPlug 'gaalcaras/ncm-R'\ncall plug#end()\n```\n\nA good idea for me is that, when I add a new line of configuration, I will add\na comment stating what that command is mean for. That way, it will be easy for\nme to remember what I was trying to achieve when I made the change.\n\n## Instaling Plug-ins\n\nIn the `init.vim` file above, I included already some of the plugins that I\nwant to use when working with nvim. When using the plugins, these should be\nin the middle of this call:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncall plug#begin('~/.vim/plugged')\n\ncall plug#end()\n```\n:::\n\n\nNow, you can see that they are included in the `init.vim` file, but still\nare not installed. For this, the first step is to find out a plugin manager.\n\nThe one that I like is [vim-plug](https://github.com/junegunn/vim-plug). To\ninstall it, you will need to:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n```\n:::\n\n\nAfter the `vim-plug` is installed, you will need to go back to your `init.vim`\ndocument. Then install the rest of plugins with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n:PlugInstall\n```\n:::\n\n\nWhen installing the rest of the plugins, you will see something similar to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"images/plug_install.png\")\n```\n\n::: {.cell-output-display}\n![](images/plug_install.png){width=370}\n:::\n:::\n\n\nIf I want to know which pluggins are installed, with the  following vim-plug\ncommand we can check them:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n:PlugStatus\n```\n:::\n\n\n# nvim workflow for R projects\n\nAt this point, we have a functional and adapted nvim for our daily work. Let's\nstart on what would the workflow look like when dealing with R projects. At first\nif you already have an R project, you can move on your terminal to that path\nand open a file with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnvim my_file.R\n```\n:::\n\n\nThis can be done for any R file (Rmd, R, qmd). The configuration will detect\nthe file format and be aware of what it is. Once we have started our nvim\nsession, we need to know a couple of commands to run R from a nvim session:\n\n`\\rf` Connect to R Console\n\n`\\rq` Quit R Console\n\n`\\d`  Run current line and move to the next line\n\n`\\l` Run current line, but cursor will stay on the same line.\n\n`\\pp` Run paragraph. But cursor will stay on the same block.\n\n`\\pd` Runs block and move to the next one\n\n`\\ss` Execute a block of **selected code**. This has to be done with visual mode\n\n`\\aa` Run entire script\n\n`\\ro` Open the \"Global Environment\"\n\n`ctrl + w + l` Jump to left panel\n\n`ctrl + w + h` Jump to right panel\n\n\nIf I made a change on the `~/.vimrc` file, I can source it with `:source ~/.vimcr`\n\nIf I have installed the pluggin `NERDTree`, I need to remap some keys. At the\nmoment I have in my `~/.vimrc` file the line: `nnoremap <C-n> :NERDTree<CR>`,\nso I don't have to do `:NERDTree` to open the file browser. Now this can be done\nwith:\n\n`ctrl + n` Open file browser on left side by default.\n\nInside the file tree browser, I can move with the arrows. To expand one folder\nand show contents, I can hit `ENTER`. Doing the same in an open folder, will\nclose it.\n\nTo move out from the NERDTree browser I can `ctrl + w + w` so I will be\njumping panels from left to right.\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}