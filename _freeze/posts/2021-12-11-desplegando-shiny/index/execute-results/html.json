{
  "hash": "63079dead389c545c342bdf3af1b5fe2",
  "result": {
    "markdown": "---\ntitle: \"Desplegando mi app de shiny con shiny-server\"\ndescription: |\n   Vamos a \"llevar a internet\" nuestra aplicación y hacerla accesible al mundo.\nauthor:\n  - name: \"Ronny A. Hernandez Mora\"\n    url: \"https://ronnyale.com\"\n    affiliations: \n      - name: \"ixpantia\"\n        url: \"https://www.ixpantia.com\"\ndate: 2020-12-28\nlicence: \"CC BY-NC\"\nimage: images/structure.png\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# ---\n# title: \"Desplegando mi app de shiny con shiny-server\"\n# description: |\n#  Vamos a \"llevar a internet\" nuestra aplicación y hacerla accesible al mundo.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n# date: 2020-12-28\n# creative_commons: CC BY-NC\n# preview: images/app.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---\n```\n:::\n\n\n\n\n# ¿Porqué necesito saber esto?\n\nSi hemos creado una aplicación de shiny, es muy probable que hayamos disfrutado\nel verla corriendo en nuestro computador y de pronto nos preguntemos: \n\n¿Cómo puedo abrir mi aplicación al mundo? ¿Cómo otras personas pueden\nacceder y usar a mi aplicación? ¿Cómo compartir mi aplicación con usuarios sin\nque tengan que instalar R, RStudio y poner al correr mi código?\n\nBueno, pues esto es lo que conocemos como desplegar una aplicación. **Vamos a**\n**\"llevar a internet\" nuestra aplicación y hacerla accesible al mundo.**\n\nCuando menciono \"hacerla accesible al mundo\", hablo de que podamos compartir un\nenlace y cualquier persona que dé click en ese enlace llegará a ver la interfaz\nde nuestra aplicación.\n\n# ¿Qué esperar de esta guía?\n\nTodos los pasos con instrucciones en `bash` para desplegar una aplicación de\nshiny con [shiny server open source](https://rstudio.com/products/shiny/download-server/)\nen un [servidor Linux con Ubuntu](https://ubuntu.com/download/server) \n\nEl **objetivo** es mostrar los pasos para instalar los elementos necesarios en \nun servidor y que se pueda desplegar el app.\n\n**No se muestran** los pasos para levantar el servidor. Esto queda a preferencia\nde cada quién y con el proveedor de su elección.\n\nTampoco se muestra en la guía los pasos para definir el dominio que potencialmente\npuede dirigir a la aplicación.\n\n## Requisitos:\n\nPara poder seguir la guía, es necesario que ya haya desarrollado una aplicación\nde shiny. Puede seguir los pasos acá indicados haciendo uso de la \n[aplicación modular](https://github.com/ronnyhdez/shiny_modular) que presenté en los [webinarios de DataLatam](https://www.youtube.com/watch?v=Hq0bcy4DCDg)\n\nAsí mismo es necesario contar con un servidor en el que pueda desplegar la \naplicación.\n\nTambién necesitamos tener conocimiento de git. La guía muestra los pasos\nhaciendo uso de esta herramienta.\n\n## Recomendaciones del servidor:\n\nSi queremos probar, lo ideal es usar un servidor con el mínimo posible. Conforme\nnuestra aplicación crezca y querramos que sea usada por más usuarios podemos\nrevisar:\n\n - memoria\n - CPU\n - disco\n \nEl sistema operativo puede ser cualquiera de su elección siempre y cuando sea\nLinux. Los pasos en esta guía están basados en la distribución Ubuntu mayor a\n18.04.4. Validar que elegimos **LTS** (Long Term Support)\n\n# Pasos\n\nSi ya tenemos un servidor, vamos a proceder con los siguientes instrucciones:\n\n## 1- Instalando R en el servidor:\n\nPara evitar inconvenientes de versiones desactualizadas de R, podemos seguir\nlas siguientes instrucciones:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Agregamos llave\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \n\n# Agregamos repositorio\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/'\n \n# Si estamos con ubuntu 20 el repositorio es:\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n# Si queremos remover el repo no hacerlo a mano y usar el siguiente:\nsudo add-apt-repository --remove 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n# Actualizamos paquetes Ubuntu\nsudo apt update\n\n# Instalamos R\nsudo apt install r-base\n\n# Verificamos que versión de R sea la 4.0.1 (o las más actualizado al momento\n# de la instalación) \nR --version\n```\n:::\n\n\n## 2- Instalando librerías linux comunes para R en el servidor\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt install libxml2-dev\nsudo apt install libssl-dev \nsudo apt install libcurl4-gnutls-dev \nsudo apt-get install unixodbc unixodbc-dev\n```\n:::\n\n\nLuego tomamos un paso para asegurarnos que todos los paquetes de Ubuntu se\nencuentren actualizados en el servidor\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt update\nsudo apt upgrade\nsudo apt autoremove\n```\n:::\n\n\n## 3- Instalando shiny server\n\nAntes de iniciar con la instalación de shiny server, debemos de instalar el\npaquete de R shiny:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo su - \\\n-c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\"\n```\n:::\n\n\nPara seguir la instalación de shiny server primero hay que instalarle a la\nmáquina `gdebi`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt-get install gdebi-core\n```\n:::\n\n\nLuego en la pagina de shiny server copiamos la [direccion](https://rstudio.com/products/shiny/download-server/ubuntu/) de donde\ntienen la última version. \n\nDebemos de asegurarnos de obtener la versión más actualizada. La instrucción\nacá mostrada puede quedar desactualizada.\n\nLa versión la validamos con el número que aparece luego de la palabra `shiny-server`\nEn este caso, la usada para la guía es (`shiny-server-1.5.13.944`)\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Damos dirección de donde traemos la descarga\nwget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.13.944-amd64.deb\n\n# Procedemos con la instalación\nsudo gdebi shiny-server-1.5.13.944-amd64.deb\n```\n:::\n\n\nUna vez instalado podemos revisar el estado de shiny-server:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo systemctl status shiny-server\n```\n:::\n\n\nPare reiniciar el servidor de shiny cuando tenemos problema:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo systemctl restart shiny-server \n```\n:::\n\n\nUna vez que tenemos instalado shiny-server,vamos a revisar por la puerta que \nestá sirviendo. Podemos tomar la dirección IP externa del servidor, copiarla\nen el navegador (yo tengo preferencia por [firefox](https://www.mozilla.org/en-US/firefox/new/)) y de seguido escribimos\n`:` y la puerta `3838` (Por defecto, la que sirve shiny)\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nip_externa_del_servidor:3838\n```\n:::\n\n\nSi no tenemos un servicio disponible (no vemos una página funcionando) debemos\nde revisar las reglas firewall del servidor e indicarle la salida del app.\n\n## 4- Llevando la aplicación al servidor\n\nA este punto tenemos nuestro servidor con R instalado, con shiny-server \nfuncionando y las principales librerías linux para usar con una aplicación de\nshiny. Ahora el paso que sigue es llevar nuestra aplicación de shiny al servidor.\n\nEs aquí donde usaremos git. Lo haremos con mi aplicación de ejemplo que se\nencuentra en [github](https://github.com/ronnyhdez/shiny_modular)\n\nDentro del servidor, las aplicaciones deben de estar bajo el siguiente directorio:\n\n`/srv/shiny-server`\n\nAllí es donde debemos de llevar nuestra aplicación.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Nos cambiamos al directorio\ncd /srv/shiny-server\n\n# Clonamos el repositorio que contiene la aplicación\ngit clone https://github.com/ronnyhdez/shiny_modular.git\n```\n:::\n\n\nLuego, necesitamos instalar en el servidor los paquetes que son necesarios para\nnuestra aplicación. Todos aquellos paquetes que hayamos usado necesitamos \nincluirlos. Si dejamos alguno por fuera es muy probable que nuestra aplicación\nno levante. (Es el error más común que cometo)\n\nHay dos maneras de realizar este paso. Uno es dando el comando desde bash y el\notro es abrir una sesión de R como usuario `root` e instalarlo tal cual lo \nharíamos en una sesión de R en nuestro computador:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Con comando de bash\nsudo su - \\\n-c \"R -e \\\"install.packages(c('shiny', 'tm', 'SnowballC', 'wordcloud',\n'shinydashboard', 'RColorBrewer', 'ggplot2', 'purrr', 'nycflights13', 'dplyr'), repos='https://cran.rstudio.com/')\\\"\"\n```\n:::\n\n\nSi hay algún paquete que no está en el CRAN porque es una versión en desarrollo, \npodemos echar mano del paquete `remotes` (el cual debimos de incluir en el paso\nanterior)\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Ejemplo de instalación de paquete en desarrollo:\nsudo su - \\\n-c \"R -e \\\"remotes::install_github(\"datastorm-open/shinymanager\", \nforce = TRUE)\n```\n:::\n\n\n## 5- Levantando la aplicación\n\nCon todos los pasos anteriores listos, procedemos a detener y volver a iniciar el\nservicio de `shiny-server`, para luego probar si nos podemos conectar a ella:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Reiniciar el servicio de manera recomendada:\nsudo systemctl stop shiny-server\nsudo systemctl start shiny-server\n\n# Revisar status del servicio\nsudo systemctl status shiny-server\n```\n:::\n\n\nSi el servicio está activo, podemos probar con la IP externa, la puerta 3838 e\nindicamos el nombre de la aplicación. Debería de ser algo similar a:\n`ip:3838/shiny_modular/`\n \n¡Y listo! Con esto tenemos los pasos básicos para desplegar nuestra aplicación\nde shiny en nuestro servidor y hacerla disponible al mundo.\n\n### Referencias\n\nEl resumen de pasos mostrados en esta guía han sido tomados y adaptados de\ndiversas fuentes como:\n\n[DigitalOcean](https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-18-04) (Algún día lograré documentar como lo hacen ellos)\n\n[Shiny Server Professional v1.5.15 Administrator's Guide](https://docs.rstudio.com/shiny-server/) El sitio a visitar cuando hay problemas con shiny-server. Es documentación técnica\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}