[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this blog",
    "section": "",
    "text": "A place to find notes about my journey creating data science products\nHi! I’m Ronny A. Hernández Mora. I have been working in the data science industry for several years and I have learned from many people who create free resources over the internet and that also are my friends and co-workers. So I decided to be more serious about sharing tricks and tips about R, linux, git and other tools that I use to create data products.\nFeel free to use and share whatever you find useful in the blog posts!"
  },
  {
    "objectID": "posts/2022-09-14-package-citation-zotero/packages_citation_zotero.html",
    "href": "posts/2022-09-14-package-citation-zotero/packages_citation_zotero.html",
    "title": "Packages citation and zotero",
    "section": "",
    "text": "Why?\nWhen working on your research project, probably you will need to cite the R packages used in your data analysis. Also, probably you use Zotero as your reference manager, so, how can you manage the R packages references in Zotero?\nWell, here I will show you one manual way to do it.\n\n\nObtain the package citation\nThis one is easy. You just use the function `citation(“dplyr”) and in your console will appear all the bibliographic info from that package.\n\ncitation(\"dplyr\")\n\n\nTo cite package 'dplyr' in publications use:\n\n  Wickham H, François R, Henry L, Müller K (2022). _dplyr: A Grammar of\n  Data Manipulation_. R package version 1.0.9,\n  &lt;https://CRAN.R-project.org/package=dplyr&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {dplyr: A Grammar of Data Manipulation},\n    author = {Hadley Wickham and Romain François and Lionel Henry and Kirill Müller},\n    year = {2022},\n    note = {R package version 1.0.9},\n    url = {https://CRAN.R-project.org/package=dplyr},\n  }\n\n\nNow, you need to pay attention on the section that says: A BibTeX entry for LaTeX users is\n\n\nCreating the BibTex file\nFrom where the @ starts, that’s what you need. So, copy (be aware of selecting the last } line) and paste it in a text file. This can be your Text Editor in ubuntu, Notepad, notes or even a Text File in your RStudio.\nYou can copy and paste as many references you need. It can look something like this:\n@Article{,\n  title = {{weathercan}: {D}ownload and format weather data from Environment and Climate Change Canada},\n  author = {Stefanie E LaZerte and Sam Albers},\n  journal = {The Journal of Open Source Software},\n  volume = {3},\n  number = {22},\n  pages = {571},\n  year = {2018},\n  url = {https://joss.theoj.org/papers/10.21105/joss.00571},\n}\n\n@Manual{,\n title = {R: A Language and Environment for Statistical Computing},\n author = {{R Core Team}},\n organization = {R Foundation for Statistical Computing},\n address = {Vienna, Austria},\n year = {2021},\n url = {https://www.R-project.org/},\n}\n\n@Manual{,\n  title = {dplyr: A Grammar of Data Manipulation},\n  author = {Hadley Wickham and Romain François and Lionel Henry and Kirill Müller},\n  year = {2022},\n  note = {R package version 1.0.9},\n  url = {https://CRAN.R-project.org/package=dplyr},\n}\nSave it with the extention .bib:\n\n\n\nImporting the file in Zotero\nOpen Zotero and look for the option import. It will open a window.\n\nSelect the option (BibTex, RIS, Zotero RDF, etc.) and from there, look the file in the path you saved. Open the file and a new window will pop up. The options to select there are up to you:\n\nFinally, you will see that you have the references imported to Zotero!\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{a. hernandez mora2022,\n  author = {A. Hernandez Mora, Ronny and Calderon Morales, Erick},\n  title = {Packages Citation and Zotero},\n  date = {2022-09-14},\n  url = {https://ronnyale.com/posts/2022-09-14-package-citation-zotero/packages_citation_zotero.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nA. Hernandez Mora, Ronny, and Erick Calderon Morales. 2022.\n“Packages Citation and Zotero.” September 14, 2022. https://ronnyale.com/posts/2022-09-14-package-citation-zotero/packages_citation_zotero.html."
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html",
    "href": "posts/2021-12-11-desplegando-shiny/index.html",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "",
    "text": "# ---\n# title: \"Desplegando mi app de shiny con shiny-server\"\n# description: |\n#  Vamos a \"llevar a internet\" nuestra aplicación y hacerla accesible al mundo.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n# date: 2020-12-28\n# creative_commons: CC BY-NC\n# preview: images/app.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#requisitos",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#requisitos",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "Requisitos:",
    "text": "Requisitos:\nPara poder seguir la guía, es necesario que ya haya desarrollado una aplicación de shiny. Puede seguir los pasos acá indicados haciendo uso de la aplicación modular que presenté en los webinarios de DataLatam\nAsí mismo es necesario contar con un servidor en el que pueda desplegar la aplicación.\nTambién necesitamos tener conocimiento de git. La guía muestra los pasos haciendo uso de esta herramienta."
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#recomendaciones-del-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#recomendaciones-del-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "Recomendaciones del servidor:",
    "text": "Recomendaciones del servidor:\nSi queremos probar, lo ideal es usar un servidor con el mínimo posible. Conforme nuestra aplicación crezca y querramos que sea usada por más usuarios podemos revisar:\n\nmemoria\nCPU\ndisco\n\nEl sistema operativo puede ser cualquiera de su elección siempre y cuando sea Linux. Los pasos en esta guía están basados en la distribución Ubuntu mayor a 18.04.4. Validar que elegimos LTS (Long Term Support)"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#instalando-r-en-el-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#instalando-r-en-el-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "1- Instalando R en el servidor:",
    "text": "1- Instalando R en el servidor:\nPara evitar inconvenientes de versiones desactualizadas de R, podemos seguir las siguientes instrucciones:\n\n# Agregamos llave\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \n\n# Agregamos repositorio\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/'\n \n# Si estamos con ubuntu 20 el repositorio es:\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n# Si queremos remover el repo no hacerlo a mano y usar el siguiente:\nsudo add-apt-repository --remove 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n# Actualizamos paquetes Ubuntu\nsudo apt update\n\n# Instalamos R\nsudo apt install r-base\n\n# Verificamos que versión de R sea la 4.0.1 (o las más actualizado al momento\n# de la instalación) \nR --version"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#instalando-librerías-linux-comunes-para-r-en-el-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#instalando-librerías-linux-comunes-para-r-en-el-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "2- Instalando librerías linux comunes para R en el servidor",
    "text": "2- Instalando librerías linux comunes para R en el servidor\n\nsudo apt install libxml2-dev\nsudo apt install libssl-dev \nsudo apt install libcurl4-gnutls-dev \nsudo apt-get install unixodbc unixodbc-dev\n\nLuego tomamos un paso para asegurarnos que todos los paquetes de Ubuntu se encuentren actualizados en el servidor\n\nsudo apt update\nsudo apt upgrade\nsudo apt autoremove"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#instalando-shiny-server",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#instalando-shiny-server",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "3- Instalando shiny server",
    "text": "3- Instalando shiny server\nAntes de iniciar con la instalación de shiny server, debemos de instalar el paquete de R shiny:\n\nsudo su - \\\n-c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\"\n\nPara seguir la instalación de shiny server primero hay que instalarle a la máquina gdebi\n\nsudo apt-get install gdebi-core\n\nLuego en la pagina de shiny server copiamos la direccion de donde tienen la última version.\nDebemos de asegurarnos de obtener la versión más actualizada. La instrucción acá mostrada puede quedar desactualizada.\nLa versión la validamos con el número que aparece luego de la palabra shiny-server En este caso, la usada para la guía es (shiny-server-1.5.13.944)\n\n# Damos dirección de donde traemos la descarga\nwget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.13.944-amd64.deb\n\n# Procedemos con la instalación\nsudo gdebi shiny-server-1.5.13.944-amd64.deb\n\nUna vez instalado podemos revisar el estado de shiny-server:\n\nsudo systemctl status shiny-server\n\nPare reiniciar el servidor de shiny cuando tenemos problema:\n\nsudo systemctl restart shiny-server \n\nUna vez que tenemos instalado shiny-server,vamos a revisar por la puerta que está sirviendo. Podemos tomar la dirección IP externa del servidor, copiarla en el navegador (yo tengo preferencia por firefox) y de seguido escribimos : y la puerta 3838 (Por defecto, la que sirve shiny)\n\nip_externa_del_servidor:3838\n\nSi no tenemos un servicio disponible (no vemos una página funcionando) debemos de revisar las reglas firewall del servidor e indicarle la salida del app."
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#llevando-la-aplicación-al-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#llevando-la-aplicación-al-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "4- Llevando la aplicación al servidor",
    "text": "4- Llevando la aplicación al servidor\nA este punto tenemos nuestro servidor con R instalado, con shiny-server funcionando y las principales librerías linux para usar con una aplicación de shiny. Ahora el paso que sigue es llevar nuestra aplicación de shiny al servidor.\nEs aquí donde usaremos git. Lo haremos con mi aplicación de ejemplo que se encuentra en github\nDentro del servidor, las aplicaciones deben de estar bajo el siguiente directorio:\n/srv/shiny-server\nAllí es donde debemos de llevar nuestra aplicación.\n\n# Nos cambiamos al directorio\ncd /srv/shiny-server\n\n# Clonamos el repositorio que contiene la aplicación\ngit clone https://github.com/ronnyhdez/shiny_modular.git\n\nLuego, necesitamos instalar en el servidor los paquetes que son necesarios para nuestra aplicación. Todos aquellos paquetes que hayamos usado necesitamos incluirlos. Si dejamos alguno por fuera es muy probable que nuestra aplicación no levante. (Es el error más común que cometo)\nHay dos maneras de realizar este paso. Uno es dando el comando desde bash y el otro es abrir una sesión de R como usuario root e instalarlo tal cual lo haríamos en una sesión de R en nuestro computador:\n\n# Con comando de bash\nsudo su - \\\n-c \"R -e \\\"install.packages(c('shiny', 'tm', 'SnowballC', 'wordcloud',\n'shinydashboard', 'RColorBrewer', 'ggplot2', 'purrr', 'nycflights13', 'dplyr'), repos='https://cran.rstudio.com/')\\\"\"\n\nSi hay algún paquete que no está en el CRAN porque es una versión en desarrollo, podemos echar mano del paquete remotes (el cual debimos de incluir en el paso anterior)\n\n# Ejemplo de instalación de paquete en desarrollo:\nsudo su - \\\n-c \"R -e \\\"remotes::install_github(\"datastorm-open/shinymanager\", \nforce = TRUE)"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#levantando-la-aplicación",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#levantando-la-aplicación",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "5- Levantando la aplicación",
    "text": "5- Levantando la aplicación\nCon todos los pasos anteriores listos, procedemos a detener y volver a iniciar el servicio de shiny-server, para luego probar si nos podemos conectar a ella:\n\n# Reiniciar el servicio de manera recomendada:\nsudo systemctl stop shiny-server\nsudo systemctl start shiny-server\n\n# Revisar status del servicio\nsudo systemctl status shiny-server\n\nSi el servicio está activo, podemos probar con la IP externa, la puerta 3838 e indicamos el nombre de la aplicación. Debería de ser algo similar a: ip:3838/shiny_modular/\n¡Y listo! Con esto tenemos los pasos básicos para desplegar nuestra aplicación de shiny en nuestro servidor y hacerla disponible al mundo.\n\nReferencias\nEl resumen de pasos mostrados en esta guía han sido tomados y adaptados de diversas fuentes como:\nDigitalOcean (Algún día lograré documentar como lo hacen ellos)\nShiny Server Professional v1.5.15 Administrator’s Guide El sitio a visitar cuando hay problemas con shiny-server. Es documentación técnica"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html",
    "href": "posts/2023-02-27-nvim-and-r/index.html",
    "title": "Workflow to use R with Neovim",
    "section": "",
    "text": "There are several reasons why using Neovim with Lua and Packer for working with R can be beneficial:\n\nLightweight and Customizable: Neovim is a lightweight text editor that runs in the terminal, providing a clean and minimalistic interface. By configuring it with Lua, you have the flexibility to customize and personalize your editor to match your preferences and workflow.\nEfficient R Coding: Neovim offers powerful features and key bindings specifically tailored for working with R, such as sending code to the R console, code navigation, code completion, and documentation lookup. These features help streamline your R coding workflow and enhance your productivity.\nPackage Management with Packer: Packer is a plugin manager for Neovim that simplifies the installation and management of plugins. With Packer, you can easily add, update, and remove plugins, allowing you to extend the functionality of Neovim and enhance your R coding experience.\nTerminal-based Environment: Working in a terminal-based environment can be advantageous for R development. It allows you to focus on your code without distractions and provides a consistent experience across different platforms and systems.\n\nBy following the tutorial here, you can learn how to install and configure Neovim with Lua and Packer to set up an efficient and streamlined environment for working with R.\nGive it a try and see how this setup can enhance your R coding experience!"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html#movements",
    "href": "posts/2023-02-27-nvim-and-r/index.html#movements",
    "title": "Workflow to use R with Neovim",
    "section": "Movements",
    "text": "Movements\nctrl + w + l Jump to left panel\nctrl + w + h Jump to right panel\ngg Move to of file\nG Move bottom of file\nfunction + Shift + up or down Take to the upper or lower page section\n{ Go one paragraph up\n} Go one paragraph down"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html#r-specific-commands",
    "href": "posts/2023-02-27-nvim-and-r/index.html#r-specific-commands",
    "title": "Workflow to use R with Neovim",
    "section": "R specific commands",
    "text": "R specific commands\n\\rf Connect to R Console\n\\rq Quit R Console\n\\d Run current line and move to the next line\n\\l Run current line, but cursor will stay on the same line.\n\\pp Run paragraph. But cursor will stay on the same block.\n\\pd Runs block and move to the next one\n\\ss Execute a block of selected code. This has to be done with visual mode\n\\aa Run entire script\n\\ro Open the “Global Environment”\n\\r= Expand all\n\\r- Collapse all\n\\qp Render preview .qmd (If I save the doc, it will re-render the site)\n\\gn Next chunk\n\\gN Previous chunk\n\\ch Run all previous chunks to here\n\\cc Run current chunk\nspace bar Run one line of code (You need to create this key binding)"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html#edit-files",
    "href": "posts/2023-02-27-nvim-and-r/index.html#edit-files",
    "title": "Workflow to use R with Neovim",
    "section": "Edit files",
    "text": "Edit files\n:%s/word_in_file/word_to_insert Substitute all matches\n:set spell will set the grammar check in the document\nz= will open the options to correct a word."
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "",
    "text": "# ---\n# title: \"Creating a website using mkdocs, Rmarkdown and GitHub pages\"\n# description: |\n#   A posible solution for note takers (and those who need to organize your documentation) with mkdocs and Rmarkdown.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/ \n# date: 2022-01-13\n# creative_commons: CC BY-NC\n# preview: images/site_alive.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#what-are-we-going-to-create",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#what-are-we-going-to-create",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "What are we going to create?",
    "text": "What are we going to create?\nA static web page like this one to manage your documentation created in Rmarkdown"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#the-problem",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#the-problem",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "The problem:",
    "text": "The problem:\nPretty often I found myself in situation where I say: “I did this sometime ago and now I don’t remember quite well which were the steps to do it again”.\nFrom my job and also current projects I’m always taking raw notes in a text file file and despite the tons of apps out there, I like text files because they are pretty simple and this allows me to just focus in writing down the idea, concept or steps of what I’m doing and implement markdown.\nBut, the problem with this approach is that at the end of the day, I have my desktop or other folders with a lot of individual .md or txt files laying around without any intuitive context. This got me in troubles and in loosing time when I wanted to get back to something that I did and that I had somewhere in my computer.\nIf at this point your are asking yourself: why you didn’t use a wiki? or a vignette? or an Rmarkdwon file? or something more organized? The answer is simple: In the middle of a project execution, when I doubt about something, I would go to google or a reference book, grab what I needed and take a quick note about the steps that I followed to accomplish my task. If it didn’t work I would throw away the file, if it worked, I would keep the file.\nThen, I found out about MkDocs (actually Frans was who showed me this) and it was the perfect solution: a simple web page, an index and most important: a search toolbar that can search in all the web page content (I mean, all my notes in there)!\n\nAs they state in their site:\n\nMkDocs is a fast, simple and downright gorgeous static site generator that’s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\n\nNow, they state that source files are written in Markdown, but if I’m an R user, probably I’m used to Rmarkdown files. Plus it’s nice to create documents in Rmarkdown where I can mix markdown and R code (R + markdown)."
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#so-how-can-i-set-up-everything",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#so-how-can-i-set-up-everything",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "So, how can I set up everything?",
    "text": "So, how can I set up everything?\nFor this recipe, you will need:\n\nR and RStudio\nRmarkdown package\nMkDocs\ngit\nGitHub account\n\nI’m not going to describe how to install R RStudio, Rmarkdown or git. There are plenty good tutorials and documentation on how to do it out there. I’m going to describe the process from the installation of MkDocs.\n\nGetting MkDocs\nFor this, I followed the instructions over here. I got already python on my machine and I’m a Linux user, so I’m using Ubuntu 20.04\nGiven that I had already python I just installed MkDocs:\n\npip install mkdocs\n\nThen I validated that the installation was succesful:\n\n$ mkdocs --version\nmkdocs, version 1.2.2 from /home/your_username/.local/lib/python3.8/site-packages/mkdocs (Python 3.8)\n\nDone! I got MkDocs on my computer.\n\n\nGetting Matherial theme\nI don’t like the default theme that comes with MkDocs, so I changed to Matherial.\nTo install this theme, you will need to run in the terminal:\n\n$ pip3 install mkdocs-material\n\n\n\nConfiguring your GitHub repository\nYou will need to have an account already on GitHub. When you are done with this step, you can go and create a repository. Also you will need to go to settings, search for Pages on the left hand side menu and there select the main branch to enable GitHub Pages for your repository.\nThe steps are the following:\nCreate a new repository\n\nOptions for the new repo\n\nSettings to enable GitHub pages"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#cloning-your-project",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#cloning-your-project",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Cloning your project",
    "text": "Cloning your project\nIf you are already familiar with this step, skip this section and go ahead to the next session. If you are starting with git and GitHub here is the set of steps to clone your repo and start working.\nUp to this point we just have created the repository on GitHub and tweak some settings. It’s time to clone the repository created on GitHub to our computer. We will be working with the RStudio IDE.\nCreate new project\n\nSelect the Version Control option \nThen select the Git option \nNow, go to your repository on GitHub and under the Code button copy the url. Make sure that the HTTPS option is highlighted. \nCopy the URL in the Repository URL section. The Project directory name should auto-populate. Then select your path where you want to locate your repository folder. \nNow, RStudio should open a new session for working on your repository!"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#working-on-your-notes",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#working-on-your-notes",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Working on your notes",
    "text": "Working on your notes\nNow we are all set. We can start creating our Rmarkdown documents:\n\nCreate as many Rmd documents as you need. Each document will be a “section” on your final website.\nEach of the titles and subtitles in your document will be sections inside the specific page.\nAlso, use relative paths. This will make everything less error prone.\nNow, because we are going to use the package docmaker we need to follow a structure:\n\nAll your Rmd files should be in the root of your project.\nYour data, images, pdfs files can be saved inside folders.\nDon’t use docs folder. This is a special folder designated to save the files needed to build the web page. docmaker package will be in charge of the use of this folder, so you don’t have to worry about it.\n\nYour files in your repository should look something like this:\n\n\n.gitignore advice\nIn order to not make your control version slow or run out of space in your GitHub account, ignore some files writing them in your .gitignore file.\nJust open that file in RStudio and add the following lines to not include images, data, credentials or other files that are not necessary for control versioning:\n\nIn there I added:\n# Personal files\ndata/\nimages/\n*.html\n.Renviron\n\n\nSending your changes to your github repository.\nFor this example I’m not using branches to avoid focusing on the git details, so we are just going to send everything to the main branch. This step is\n\ngit add .\ngit commit -m \"Add first notes\"\ngit push\n\nBe aware that this is probably going to ask you for who you are (user name on GitHub and email) and your credentials. One tip to save your credentials for the specific repository that you are working on is the following command after you enter your credentials:\n\ngit config credential.helper store"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#deploy-and-publish-your-notes-with-docmaker",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#deploy-and-publish-your-notes-with-docmaker",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Deploy and publish your notes with docmaker",
    "text": "Deploy and publish your notes with docmaker\nSo far, we have our notes. But we are still lacking the part of publishing in our web page the notes. There are several steps to do this manually but after many times repeating everything I decided to create a small R package to automatize this steps. This package is called dockmaer\nYou can install the package with:\n\ndevtools::install_github(\"ronnyhdez/docmaker\")\n\nNow, on your console you can load the package:\n\nlibrary(docmaker)\n\n\nConfigure repo with docmaker\nBefore building and deploying our notes, we need to do some configuration steps in our repository. docmaker can take care of this with the function:\n\nbuild_repo(github_page_url = \"https://ronnyhdez.github.io/test_docmaker/\",\n           site_author = \"Ronny A. Hernández Mora\")\n\nWe can get the URL of our repository in the settings &gt; page on GitHub. After we enabled this in a step before, there should appear the URL designated by GitHub for our web site.\n\nThe site_author should be our name.\nThis function will do the following:\n\nCreate a yml file\nAdd to the .gitignore the site folder\nCreate a docs folder\n\n\n\nBuild and deploy notes\nBecause this is our first time, all of our notes (three in the example) are not existing as md documents nor even built or deploy with mkdocs.\ndocmaker have a function to take all the .Rmd files existing in our project root and do all the steps needed to deploy this ones:\n\nmake_all_docs(deploy = TRUE)\n\nThis function will do the following:\n\nRender all our Rmd files to md\nMove the outputs (including images) to the docs folder\nIf we are using a README.Rmd file this will be ignore\nBuild the mkdocs\nIf deploy is set to TRUE it will deploy the notes.\nCreate an specifi branch for the pages deployment: gh-deploy\n\nNow, given that we are using a new branch to be deployed, we need to go back to GitHub pages and make a small change: change the branch selected to be build from:\n\nAfter some seconds (or a few minutes), we should be able to see our site alive!\n\nAs we can see, our 3 files are sections in the left side menu. The titles and subtitles of each document will be shown in the Table of contents in the right side menu."
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#code-and-example-site",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#code-and-example-site",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Code and example site",
    "text": "Code and example site\nAll the code and configuration files of the example site are in this GitHub repository:\n\nRepository\nSite"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html",
    "href": "posts/2021-12-11-tiempo-en-r/index.html",
    "title": "Tiempo en R",
    "section": "",
    "text": "La medición del tiempo es algo que puede ser particular, ya que hay meses con diferente número de días, en distintos países la manera de colocar el dato del día o del mes se cambia, en años bisiestos febrero tiene un día extra entre otros factores, hay diferentes\nPor ende, hacer cálculos con fechas puede resultar algo complicado, sin embargo R tiene un sistema robusto para poder lidiar con estas situaciones."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#tipo-y-clase-del-tiempo-en-r",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#tipo-y-clase-del-tiempo-en-r",
    "title": "Tiempo en R",
    "section": "Tipo y Clase del tiempo en R:",
    "text": "Tipo y Clase del tiempo en R:\nPara revisar su tipo de dato y su clase vamos a guardar esta fecha y hora de nuestro ordenador en un objeto de la siguiente manera:\n\nfecha_hora &lt;- Sys.time() # Guardar en un objeto\n\ntypeof(fecha_hora) # Tipo de dato\n\n[1] \"double\"\n\nclass(fecha_hora) # Clase del objeto\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nAl momento de utilizar la funciónSys.time(), nos devuelve una respuesta que a primera instancia nos parecería un objeto de tipo character por sus comillas alrededor de esto, sin embargo, al revisar podemos notar que es un objeto de tipo double y su clase es _ “POSIXct” “POSIXt” _ (tiene dos clases)"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#qué-signifan-esas-dos-clases",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#qué-signifan-esas-dos-clases",
    "title": "Tiempo en R",
    "section": "¿Qué signifan esas dos clases?",
    "text": "¿Qué signifan esas dos clases?\nComo mencionamos anteriormente, por convención en R se utiliza una representación numérica, basada en segundos. Esto quiere decir que cada fecha se representa por el número de segundos que han transcurrido desde las 12:00 A.M. del 1 Enero de 1970.  (UTC: Coordinated Universal Time)\nEsto es bastante útil si queremos generar gráficos de series de tiempo, pero qué sucede si queremos representar las medias por mes, o por día. En este caso es necesario contar con dos maneras de representar las fechas:\nPOSIXct el sufijo ct se refiere a continuos time y este formato es representado de manera númerica por segundos. Este es un vector que se puede usar como una variable continua en modelos de regresión.\nPOSIXlt el sufijo lt corresponde a list time y lo que hace es una lista de todas las descripciones categóricas del tiempo. Es muy útil como variable explicativa categórica.\n\n¿Cómo funcionan el sistema POSIX?\nPara revisar de qué manera R hace esto podemos hacer uso de la función unclass()\n\nunclass(fecha_hora)\n\n[1] 1663098567\n\n\nEl resultado que obtenemos es un elemento que R utiliza para construir un vector doble. Lo que tenemos allí es que desde las 12:00 A.M. del 1 de Enero de 1970 han transcurrido 1 514 244 708 hasta el día en que este tutorial se ha creado y este es el formato POSIXct\nEn el caso de caso de una lista como POSIXlt vamos a revisar los componentes del mismo objeto con el que hemos venido trabajando:\n\nfecha_hora &lt;- as.POSIXlt(fecha_hora) # Definimos formato\nunlist(fecha_hora) # Sacamos de la lista los objetos almacenados\n\n               sec                min               hour               mday \n\"26.8818531036377\"               \"49\"               \"13\"               \"13\" \n               mon               year               wday               yday \n               \"8\"              \"122\"                \"2\"              \"255\" \n             isdst               zone             gmtoff \n               \"1\"              \"MDT\"           \"-21600\" \n\n\n¿Qué es lo que tenemos? Se nos muestran los componentes de la lista, que está representada por el número de segundos, minutos, hora (en formato de 24 horas). Luego viene mday que es el día del mes (inicia en 1), mon es el mes del año (comienza en enero = 0), year que representa el año (inicia en 0 = 1900),wday el día de la semana (inicia domingo = 0), yday es el número de día del año (1 de enero = 0). Por último la variable isdst lo que hace es indicarnos si un horario de verano está siendo considerado (0 = FALSE, como en este caso)"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#diferencias-entre-fechas-en-un-vector",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#diferencias-entre-fechas-en-un-vector",
    "title": "Tiempo en R",
    "section": "Diferencias entre fechas en un vector",
    "text": "Diferencias entre fechas en un vector\n\n# Primero hacemos un objeto a clase difftime:\nas.difftime(otras_fechas, \"%d%b%Y\")\n\nTime differences in days\n[1]  -2415 -11775  -9807"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#cálculos-con-dos-objetos",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#cálculos-con-dos-objetos",
    "title": "Tiempo en R",
    "section": "Cálculos con dos objetos:",
    "text": "Cálculos con dos objetos:\nHay cálculos que se pueden generar con fechas y horas, ya sea sumando a una fecha o a una hora un número (que representará segundos), también entre fechas/horas e inclusive la utilización de operadores lógicos.\n\n# vamos a generar dos fechas:\n\nfecha_1 &lt;- as.POSIXlt(\"2018-01-01\")\nfecha_2 &lt;- as.POSIXlt(\"2017-01-02\")\n\n\nY podemos sumar una fecha con un número:\n\n\nfecha_1 + 100000\n\n[1] \"2018-01-02 03:46:40 MST\"\n\n\nEsto nos suma cien mil segundos, lo cual agrega 3 horas, 46 minutos y 40 segundos a la fecha que habíamos creado.\n\nPodemos resta esa misma cantidad de segundos:\n\n\nfecha_1 - 100000\n\n[1] \"2017-12-30 20:13:20 MST\"\n\n\nVemos que nos devuelve al 30 de diciembre del 2017 a las 20 con 13 minutos y 20 segundos.\n\nRestarle a la fecha 1 la fecha 2:\n\n\nfecha_1 - fecha_2\n\nTime difference of 364 days\n\n\nNos dice que entre las fechas hay 364 días.\n\nHacer una operación lógica:\n\n\nfecha_1 &lt;= fecha_2\n\n[1] FALSE\n\n\nSi decimos que fecha_1 es menor o igual que fecha_2 R nos dice que eso es falso."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-días",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-días",
    "title": "Tiempo en R",
    "section": "Diferencia de días:",
    "text": "Diferencia de días:\nSi tenemos una pregunta como: ¿Cuántos días han transcurrido desde el 1 de diciembre del 2017 al 2 de enero del 2018?\n\ndifftime(\"2018-01-02\",\"2017-12-01\")\n\nTime difference of 32 days\n\n\nLa respuesta es que han transcurrido 32 días."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-horas",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-horas",
    "title": "Tiempo en R",
    "section": "Diferencia de horas:",
    "text": "Diferencia de horas:\nEn este caso, si tenemos horas en lugar de fechas, podemos hacer uso de la función as.difftime()\n\ntiempo_1 &lt;- as.difftime(\"12:00:00\")\ntiempo_2 &lt;- as.difftime(\"17:20:00\")\ntiempo_2 - tiempo_1\n\nTime difference of 5.333333 hours\n\n\nNos dice cuál es la diferencia en horas. (Si te preguntas porqué 5.33 en lugar de 5 horas y 20 minutos, recuerde que la respuesta está dada en horas y 20 minutos corresponden a 0.333 horas)"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-día",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-día",
    "title": "Tiempo en R",
    "section": "Secuencia en aumento por día:",
    "text": "Secuencia en aumento por día:\n\nseq(as.POSIXlt(\"2018-01-01\"), as.POSIXlt(\"2018-01-10\"), \"1 day\")\n\n [1] \"2018-01-01 MST\" \"2018-01-02 MST\" \"2018-01-03 MST\" \"2018-01-04 MST\"\n [5] \"2018-01-05 MST\" \"2018-01-06 MST\" \"2018-01-07 MST\" \"2018-01-08 MST\"\n [9] \"2018-01-09 MST\" \"2018-01-10 MST\"\n\n\n¿Qué hicimos? La función seq() nos genera un vector con una serie de valores de una secuencia, en este caso le indicamos dos elementos de tipo POSIXlt que corresponden a fechas y un último argumento que indica 1 día. Es decir, que del 1ero de enero del 2018 al 10 de enero del 2018 queremos una secuencia entre esas fechas que aumente de 1 día en 1 día."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-semanas",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-semanas",
    "title": "Tiempo en R",
    "section": "Secuencia en aumento por semanas:",
    "text": "Secuencia en aumento por semanas:\n\nseq(as.POSIXlt(\"2018-01-01\"), as.POSIXlt(\"2018-02-01\"), \"1 weeks\")\n\n[1] \"2018-01-01 MST\" \"2018-01-08 MST\" \"2018-01-15 MST\" \"2018-01-22 MST\"\n[5] \"2018-01-29 MST\"\n\n\n¿Qué hicimos? Nuevamente indicamos un par de fechas que delimitan el inicio y el final de la secuencia y por último le decimos que la secuencia aumente de semana en semana.\nEsto lo podemos hacer de igual manera si queremos que la secuencia aumente por meses months o por años year"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-tiempo-en-segundos",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-tiempo-en-segundos",
    "title": "Tiempo en R",
    "section": "Secuencia en aumento por tiempo en segundos:",
    "text": "Secuencia en aumento por tiempo en segundos:\n\nseq(as.POSIXlt(\"2018-01-01\"),as.POSIXlt(\"2018-01-02\"),8000)\n\n [1] \"2018-01-01 00:00:00 MST\" \"2018-01-01 02:13:20 MST\"\n [3] \"2018-01-01 04:26:40 MST\" \"2018-01-01 06:40:00 MST\"\n [5] \"2018-01-01 08:53:20 MST\" \"2018-01-01 11:06:40 MST\"\n [7] \"2018-01-01 13:20:00 MST\" \"2018-01-01 15:33:20 MST\"\n [9] \"2018-01-01 17:46:40 MST\" \"2018-01-01 20:00:00 MST\"\n[11] \"2018-01-01 22:13:20 MST\"\n\n\nEn este caso 8000 segundos nos genera un aumento de 2 horas, 13 minutos y 20 segundos en cada elemento de la secuencia."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-sin-especificación-de-final",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-sin-especificación-de-final",
    "title": "Tiempo en R",
    "section": "Secuencia sin especificación de final:",
    "text": "Secuencia sin especificación de final:\n\nseq(as.POSIXlt(\"2018-01-01\"), by = \"weeks\", length = 7)\n\n[1] \"2018-01-01 MST\" \"2018-01-08 MST\" \"2018-01-15 MST\" \"2018-01-22 MST\"\n[5] \"2018-01-29 MST\" \"2018-02-05 MST\" \"2018-02-12 MST\"\n\n\n¿Qué hicimos? Generamos nuevamente una secuencia en donde sólo le indicamos la fecha en la que debe de iniciar, seguido del argumento semanas y por último la cantidad de objetos que debería de crear. Es decir, el final está generado por la cantidad (length) de elementos que queremos en esa secuencia."
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html",
    "href": "posts/2021-12-11-estructuras-r/index.html",
    "title": "Intro a datos y estructuras en R",
    "section": "",
    "text": "# ---\n# title: \"Intro a datos y estructuras en R\"\n# description: |\n#   Una breve intro a estructuras en R.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n# date: 2018-02-01\n# creative_commons: CC BY-NC\n# preview: images/structure.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#primer-paso",
    "href": "posts/2021-12-11-estructuras-r/index.html#primer-paso",
    "title": "Intro a datos y estructuras en R",
    "section": "Primer paso:",
    "text": "Primer paso:\nPrimero tenemos que entender que R lee los datos que le damos de distintas maneras para poder manejarlos y hacer tareas que le pidamos. Entre estos tenemos:\n\ncharacter: corresponden a texto\nnumeric: corresponden a números\ninteger: son números enteros (sin decimales)\nlogical: son condicionales y están en forma de verdadero o falso\ncomplex: corresponden a números complejos\n\nPara crear vectores c( )\n\na &lt;- c(\"biologia\", \"A\", \"estadistica\")\nclass(a)\n\n[1] \"character\"\n\n\n\nb &lt;- c(18.6, 90)\nclass(b)\n\n[1] \"numeric\"\n\n\n\nc &lt;- c(18L, 26L)\nclass(c)\n\n[1] \"integer\"\n\n\n\nd &lt;- 2 + 4i\nclass(d)\n\n[1] \"complex\"\n\n\n\ne &lt;- c(TRUE, FALSE)\nclass(e)\n\n[1] \"logical\""
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#vectores-elementos-son-del-mismo-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#vectores-elementos-son-del-mismo-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "Vectores elementos son del mismo tipo",
    "text": "Vectores elementos son del mismo tipo\n\nv_1 &lt;- c(10,20,30)\nv_2 &lt;- c(\"a\",\"b\",\"c\")\nv_3 &lt;- c(TRUE,FALSE,TRUE)"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#listas-elementos-son-de-diferente-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#listas-elementos-son-de-diferente-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "Listas elementos son de diferente tipo",
    "text": "Listas elementos son de diferente tipo\n\nl_1 &lt;- list(v_1,v_2,v_3)\n\nl_1\n\n[[1]]\n[1] 10 20 30\n\n[[2]]\n[1] \"a\" \"b\" \"c\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#matrix-es-de-dos-dimensiones-con-elementos-del-mismo-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#matrix-es-de-dos-dimensiones-con-elementos-del-mismo-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "matrix es de dos dimensiones con elementos del mismo tipo:",
    "text": "matrix es de dos dimensiones con elementos del mismo tipo:\n\nmatrix_1 &lt;- matrix(1:9,nrow = 3, ncol = 3)\nmatrix_1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#data-frame-es-de-dos-dimensiones-con-elementos-de-diferente-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#data-frame-es-de-dos-dimensiones-con-elementos-de-diferente-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "data frame es de dos dimensiones con elementos de diferente tipo:",
    "text": "data frame es de dos dimensiones con elementos de diferente tipo:\n\n# Primero creamos un par de vectores para unirlos en un dataframe\nnumero &lt;- 1:5\nnombre &lt;- c(\"Mercurio\",\"Venus\",\"Tierra\",\"Marte\",\"Jupiter\")\nplaneta &lt;- data.frame(numero,nombre)\nplaneta\n\n  numero   nombre\n1      1 Mercurio\n2      2    Venus\n3      3   Tierra\n4      4    Marte\n5      5  Jupiter"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#array-es-una-estructura-de-tres-o-más-dimensiones",
    "href": "posts/2021-12-11-estructuras-r/index.html#array-es-una-estructura-de-tres-o-más-dimensiones",
    "title": "Intro a datos y estructuras en R",
    "section": "Array es una estructura de tres o más dimensiones:",
    "text": "Array es una estructura de tres o más dimensiones:\n\nD &lt;- 1:12\ndim(D) &lt;- c(2,3,2)        # Dos filas, tres columnas y dos \"caras\"\nD\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#qué-siginifica-dir-y-ls",
    "href": "posts/2021-12-11-estructuras-r/index.html#qué-siginifica-dir-y-ls",
    "title": "Intro a datos y estructuras en R",
    "section": "¿Qué siginifica dir() y ls()?",
    "text": "¿Qué siginifica dir() y ls()?\ndir () me refiere a los archivos que se encuentran en el directorio de trabajo. ls () me refiere a los objetos que se encuentran en el espacio de trabajo"
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html",
    "href": "posts/2021-12-11-usando-tmux/index.html",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "Es un sistema de multiplexación para sistemas Unix. Lo que nos permite es realizar múltiples tareas en una terminal a través del uso de paneles, sesiones o ventanas.\nEn otras palabras, es abrir una terminal y poder abrir y usar otras terminales dentro de esta.\n\n\nPara instalarlo en distribuciones basadas en debian, podemos hacerlo con el comando:\n\nsudo apt install tmux\n\nPara validar que se instaló\n\n# Si nos da un número de version, estamos listos.\ntmux -V\n\n\n\n\nPara iniciar la sesión con tmux, corremos en la terminal el comando con el mismo nombre:\n\ntmux\n\nVeremos en la parte inferior de la terminal que tenemos información como\n\n[0] 0:bash*    \"ronny\" 22:35 03-ene-21\n\nCon esto podemos asegurar que estamos usando tmux sin problema.\nPara hacer uso de las funciones que trae tmux, necesitamos tener en cuenta que hay un prefijo configurado por defecto que hay que utilizar para la mayoría de las operaciones: ctrl + b\nEsto se puede configurar para no dejarlo en una combinación de teclas tan incómoda, pero lo haremos luego.\n\n\n\n\nEn la terminal podemos dividir la vista en varios paneles.\nSe pueden dividir paneles en otros más.\nCada panel puede ejecutar distintas tareas.\n\nDividir paneles horizontal\n\nctrl + b + \"\n\nDividir paneles vertical\n\nctrl + b + %\n\nCerrar un panel\n\n# Primera opción\nctrl + b + x\n\n# Segunda opción:\nexit\n\nMoverse entre paneles\n\nctrl + b + ← ↑ → ↓ \n\nZoom en un panel\n\nSobre el panel que queremos enfocarnos usamos el comando.\nLos demás paneles no desaparecen, quedan ocultos por el panel en zoom.\nCon el mismo comando quitamos el enfoque en el panel\n\n\n# Para hacer el enfoque en un panel\nctrl + b + z\n\n# Para quitar el enfoque, en el panel escribimos el mismo comando\nctrl + b + z\n\n\n\n\n\nA diferencia de los paneles, las ventanas nos dan una pantalla completa.\nPodemos generar varias ventanas y en cada ventana crear paneles.\nEn parte inferior de la terminal, tendremos info sobre la o las ventanas.\n\nCrear ventana\n\n# c = create\nctrl + b + c\n\nMoverse a ventana anterior\n\n# p = previous\nctrl + b + p\n\nMoverse a ventana siguiente\n\n# n = next \nctrl + b + n\n\nMoverse a ventana por id numérico\n\nctrl + b + numero_ventana\n\nCerrar una ventana\n\nctrl + b + &\n\nRenombrar ventana\n\n# Para abrir opción de renombrar\nctrl + b + ,\n\n\n\n\n\nCada vez que usamos el comando tmux abrimos una sesión.\nSi se cierra la terminal, podemos regresar a la sesión.\nLas sesiones pueden correr como proceso “oculto”\n\nDesconectarse de una sesión\n\nctrl + b + d\n\nRevisar sesiones de tmux abierta con bash\n\nps aux | grep tmux\n\nRevisar sesiones tmux con funcionalidad propia\n\n# Comando completo\ntmux list-sessions\n\n# Comando corto\ntmux ls\n\nConectarnos a una sesión en específico\n\n# Por ejemplo a sesión 1\ntmux attach -t 1\n\nCambiar nombres a sesiones\n\n# Dentro de la sesión\nctrl + b + $\n\nCrear una nueva sesión con nombre\n\ntmux new -s \"mi_proyecto\"\n\n\n\n\nExisten hojas de referencias para tmux. Una es esta"
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html#instalando-tmux",
    "href": "posts/2021-12-11-usando-tmux/index.html#instalando-tmux",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "Para instalarlo en distribuciones basadas en debian, podemos hacerlo con el comando:\n\nsudo apt install tmux\n\nPara validar que se instaló\n\n# Si nos da un número de version, estamos listos.\ntmux -V"
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html#primeros-pasos-con-tmux",
    "href": "posts/2021-12-11-usando-tmux/index.html#primeros-pasos-con-tmux",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "Para iniciar la sesión con tmux, corremos en la terminal el comando con el mismo nombre:\n\ntmux\n\nVeremos en la parte inferior de la terminal que tenemos información como\n\n[0] 0:bash*    \"ronny\" 22:35 03-ene-21\n\nCon esto podemos asegurar que estamos usando tmux sin problema.\nPara hacer uso de las funciones que trae tmux, necesitamos tener en cuenta que hay un prefijo configurado por defecto que hay que utilizar para la mayoría de las operaciones: ctrl + b\nEsto se puede configurar para no dejarlo en una combinación de teclas tan incómoda, pero lo haremos luego."
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html#paneles-en-tmux",
    "href": "posts/2021-12-11-usando-tmux/index.html#paneles-en-tmux",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "En la terminal podemos dividir la vista en varios paneles.\nSe pueden dividir paneles en otros más.\nCada panel puede ejecutar distintas tareas.\n\nDividir paneles horizontal\n\nctrl + b + \"\n\nDividir paneles vertical\n\nctrl + b + %\n\nCerrar un panel\n\n# Primera opción\nctrl + b + x\n\n# Segunda opción:\nexit\n\nMoverse entre paneles\n\nctrl + b + ← ↑ → ↓ \n\nZoom en un panel\n\nSobre el panel que queremos enfocarnos usamos el comando.\nLos demás paneles no desaparecen, quedan ocultos por el panel en zoom.\nCon el mismo comando quitamos el enfoque en el panel\n\n\n# Para hacer el enfoque en un panel\nctrl + b + z\n\n# Para quitar el enfoque, en el panel escribimos el mismo comando\nctrl + b + z"
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html#ventanas-en-tmux",
    "href": "posts/2021-12-11-usando-tmux/index.html#ventanas-en-tmux",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "A diferencia de los paneles, las ventanas nos dan una pantalla completa.\nPodemos generar varias ventanas y en cada ventana crear paneles.\nEn parte inferior de la terminal, tendremos info sobre la o las ventanas.\n\nCrear ventana\n\n# c = create\nctrl + b + c\n\nMoverse a ventana anterior\n\n# p = previous\nctrl + b + p\n\nMoverse a ventana siguiente\n\n# n = next \nctrl + b + n\n\nMoverse a ventana por id numérico\n\nctrl + b + numero_ventana\n\nCerrar una ventana\n\nctrl + b + &\n\nRenombrar ventana\n\n# Para abrir opción de renombrar\nctrl + b + ,"
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html#sesiones-en-tmux",
    "href": "posts/2021-12-11-usando-tmux/index.html#sesiones-en-tmux",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "Cada vez que usamos el comando tmux abrimos una sesión.\nSi se cierra la terminal, podemos regresar a la sesión.\nLas sesiones pueden correr como proceso “oculto”\n\nDesconectarse de una sesión\n\nctrl + b + d\n\nRevisar sesiones de tmux abierta con bash\n\nps aux | grep tmux\n\nRevisar sesiones tmux con funcionalidad propia\n\n# Comando completo\ntmux list-sessions\n\n# Comando corto\ntmux ls\n\nConectarnos a una sesión en específico\n\n# Por ejemplo a sesión 1\ntmux attach -t 1\n\nCambiar nombres a sesiones\n\n# Dentro de la sesión\nctrl + b + $\n\nCrear una nueva sesión con nombre\n\ntmux new -s \"mi_proyecto\""
  },
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html#hojas-de-referencia",
    "href": "posts/2021-12-11-usando-tmux/index.html#hojas-de-referencia",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "Existen hojas de referencias para tmux. Una es esta"
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html",
    "title": "Otra introducción a git",
    "section": "",
    "text": "Si les ha sucecido que luego de trabajar en un documento, tienen una carpeta llena con nombres como: “version_final”, “version_final_final”, “version_final_corregida”, “version_final_revisada” pues git les será útil para tener un control sobre los cambios que se introducen en el documento.\nEn este tutorial haremos ejemplos con scripts de código en R y cómo los cambios que vayamos trabajando, los podemos registrar, usar, guardar y documentar con mayor eficiencia tanto para trabajar individualemente como grupalmente."
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#qué-resuelve-git-porqué-usar-git",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#qué-resuelve-git-porqué-usar-git",
    "title": "Otra introducción a git",
    "section": "",
    "text": "Si les ha sucecido que luego de trabajar en un documento, tienen una carpeta llena con nombres como: “version_final”, “version_final_final”, “version_final_corregida”, “version_final_revisada” pues git les será útil para tener un control sobre los cambios que se introducen en el documento.\nEn este tutorial haremos ejemplos con scripts de código en R y cómo los cambios que vayamos trabajando, los podemos registrar, usar, guardar y documentar con mayor eficiencia tanto para trabajar individualemente como grupalmente."
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#esquema-de-git",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#esquema-de-git",
    "title": "Otra introducción a git",
    "section": "Esquema de git",
    "text": "Esquema de git\nAqui pretendo aclarar rapidamente que vamos a hacer con git, tener el bosquejo antes de entrar en detalles. Vamos a tener un repositorio remoto o en inglés upstream que será nuestro repositorio en github/gitlab/bitbucket. De este repositorio tendremos uno local que crearemos al hacer el clon. Siempre vamos a trabajar en repositorio local (en nuestra computadora) y esos cambios los vamos a subir al remoto con un push. De igual manera cambios que existan en el repositorio remoto (porque alguien hizo una contribucion, trabajamos desde otra computadora ys ubimos los cambios) lo vamos a hacer con un pull.\nVamos a tener una rama principal llamada master. El consejo aca es tener código limpio y funcional. Todo lo que sea trabajo en desarrollo, experimentos, pruebas o tareas específicas, vamos a hacerlo en ramas. Las ramas van a tener el nombre que nosotros decidamos. Los cambios que se encuentran en estas ramas, una vez que se encuentran finalizados, revisados y funcionales los podremos integrar a nuestra rama master en un proceso conocido como merge\nCada vez que hagamos cambios en el código, vamos a hacer un commit. Esto lo podemos interpretar como marcar un punto en la historia del proyecto. Git nos mostrará información sobre cada uno de nuestros commits tal como la fecha, hora, usuario, archivos cambiados y las líneas de los archivos que se cambiaron. La idea de los commits es que siempre podamos retornar a un punto específico en la historia del proyecto.\nEn el caso de trabajar con el repositorio de alguien más, lo podemos realizar a través de un proceso que se conoce como fork, que no es más que una bifurcación del repositorio de esa persona. Al realizar un “fork” del repositorio de otra persona estamos creando una copia de dicho repositorio bajo nuestro usuario. Ahora bien, la manera de ofrecer los cambios que hemos trabajado a la persona dueña del repositorio tiene un proceso algo diferente que veremos en otro tutorial."
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#iniciar-con-git",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#iniciar-con-git",
    "title": "Otra introducción a git",
    "section": "Iniciar con git",
    "text": "Iniciar con git\nEn este segmento vamos a seguir los pasos para tener un repositorio que tenga su cuenta remota con github/gitlab/bitbucket y local a través de nuestra terminal.\n\n1. Crear repositorio en github/gitlab/bitbucket\nSi tenemos cuenta en github/gitlab/bitbucket podemos crear un repositorio. Le llamamos repositorio al sitio donde vamos a guardar nuestros archivos. Un repositorio lo podemos visualizar como una carpeta que contendrá nuestro trabajo.\nCuando se crea un nuevo repositorio lo recomendable es iniciarlo con un arhivo que se llama .gitignore y con un readme. Para hacerlo en github (y algo similar en otras plataformas) es que seleccionemos las opciones de iniciar repositorio con un archivo .gitignore y un readme. El archivo gitignore debe de ser específico para la herramienta que vayamos a usar, en este caso sería R\nLa funcionalidad del .gitignore es que este archivo (es como un archvio de texto) contiene especificaciones sobre los formatos de los archivos que no queremos que se integren en nuestro sistema de control de versiones. Generalmente no deseamos que archivos como imagenes (.png .jpeg) o bien archivos de datos muy grandes (.txt .csv .feather) sean compartidos entre repositorios remotos, locales o personas con las que colaboremos. Un ejemplo de un archivo .gitignore es el siguiente:\nSi no identifican algunos de los elementos de ahí no hay de qué preocuparse, mejor nos enfocámos en los tipos de archivos que nosotros necesitamos que NO sean tomados en cuenta por git, es decir, que no queremos que se suban a nuestro repositorio de github por ejemplo ni en la gestión de versiones. Si es el caso que tenemos que hacer el knit de un Rmarkdown y necesitamos un archivo .csv para renderizarlo, pero solamente queremos el archivo Rmakrdown en el sistema de git, pues en nuestro archivo .gitignore escribimos .csv, guardamos el archivo y listo.\nEn el caso del readme es un archivo que debe de dar una idea de qué tenemos en el repositorio. Es una guía para nosotros mismos u otros usuarios que vayan a hacer uso del repositorio y nuestro código. En github los readme se ven así:\nUna vez que el repositorio haya sido creado, vamos a encontrarnos con una opción que dirá “clone or download”. Vamos a hacer click en clone y la dirección que allí sale la tenemos que copiar (ctrl + c). La imagen muestra lo que sucede al hacer clone en el botón verde que ofrece github:\nYa con la información de la dirección del repositorio copiada, vamos a llevarla a nuestra terminal:\n\n\n2. Clonar repositorio en nuestra computadora\nUna vez que tenemos creado el repositorio y la dirección copiada, vamos a abrir nuestra terminal. Si es usuario de windows puede usar el powershell. Lo primero que vamos a ver es una dirección y allí tendremos que dirigirnos a la carpeta donde deseamos colocar el repositorio.\n\ncd ~ #Esto me va a llevar al home\n\n\ncd Desktop/ #Me lleva al escritorio\n\n\nls #Me da lista de los elementos que existen en la dirección que estoy\n\n\ncd primeras_letras_nombre &lt;TAB&gt; #Con TAB autocompleta el nombre\n\n\nEste procedimiento lo vamos realizando hasta llegar a la carpeta en la cual queremos clonar el repositorio.\n\nEl segundo paso es clonar el repositorio:\n\ngit clone &lt;dirección del repositorio que copiamos&gt;\n\nPor último nos dirigimos a la carpeta del repositorio\n\ncd &lt;nombre_repositorio&gt;\n\n¡Listo! Ya tenemos el repositorio remoto tal cual en nuestra computadora local. A partir de aquí podemos trabajar en nuestros archivos.\n\n\n3. Crear una rama en el repositorio\n¿Qué pasa si queremos hacer una variación en el código sin miedo a dañar lo que ya tenemos? Pues bien, git nos permite hacer ramas que son una bifurcación del trabajo que llevamos realizado hasta ese momento y que si luego queremos, podemos volver a integrar a la rama principal.\nCuano tenemos un repositorio la rama principal está nombrada como master. A partir de esta rama master podemos hacer ramas con los nombres que nosotros queramos. La idea de las ramas es trabajar de manera ordenada, en donde en mi rama master siempre debemos de tener código limpio y funcional y lo que sean nuevas tareas, mejoras o experimentos lo hagamos en ramas que se bifurcan a partir de la rama master.\nCuando el trabajo realizado en la rama sea funcional y limpio, lo podemos integrar a la rama master. Caso contrario podemos olvidarnos de la rama y volver a nuestra rama master.\nCrear rama\n\ngit checkout -b &lt;NOMBRE_RAMA&gt; #Nos crea y dirige a la nueva rama\n\nVerificar rama en la que estamos\n\ngit status\n\ncambiar entre ramas\nPara cambiar entre ramas que ya existen NO hay que usar “-b”\n\ngit checkout &lt;NOMBRE_RAMA&gt;\n\n\n\n4. Subir/bajar cambios\nComo estamos trabajando con un repositorio remoto y uno local, vamos a querer sincronizar los cambios. Estos cambios pasarán a estar en la historia del proyecto como commits. Un commit es un punto en la historia del proyecto que muestra el trabajo realizado en ese momento. En el flujo del trabajo que uno tenga es recomendable hacer commits regularmente y hacer el push de manera regular para asegurarnos de no perder el trabajo.\n4.1 Revisar estado de los cambios  Cuando tengamos cambios en nuestros archivos, podemos revisar cuáles han cambiado y si los tenemos incluidos o no en nuestro registro de cambios\n\ngit status\n\n4.2 Agregar cambios Los archivos que queramos agregar a la historia del proyecto lo podemos hacer de dos maneras, una donde indicamos explícitamente el archivo específico:\n\ngit add &lt;NOMBRE_ARCHIVO&gt;\n\nO de tal manera en que agreguemos todos los archivos con cambios de una vez\n\ngit add .\n\n4.3 Someter cambios a la historia de git\n\ngit commit -m \"MENSAJE_CORTO\"\n\nEl mensaje sirve para darnos a nosotros mismos o a colaboradores, una idea del cambio que se trabajó.\n4.4 Subir cambios al repositorio remoto\n\ngit push\n\n4.5 Bajar cambios del repositorio remoto Si estamos trabajando con colaboradores y han integrado cambios en el repositorio remoto que nosotros no tenemos en nuestro repositorio local, los podemos traer de la siguiente manera:\n\ngit pull"
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#qué-tenemos-hasta-acá",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#qué-tenemos-hasta-acá",
    "title": "Otra introducción a git",
    "section": "¿Qué tenemos hasta acá?",
    "text": "¿Qué tenemos hasta acá?\nUna idea básica sobre git, de sus componentes, del flujo de trabajo y de los principales comandos que se usan. Un tutorial con un ejemplo básico vendrá despueś.\n\nReferencias\nhttps://git-scm.com/book/en/v2 https://git-scm.com/book/es/v1/Ramificaciones-en-Git-Procedimientos-b%C3%A1sicos-para-ramificar-y-fusionar"
  },
  {
    "objectID": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html",
    "href": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html",
    "title": "Datos abiertos municipalidad de San José, Costa Rica",
    "section": "",
    "text": "# ---\n# title: \"Datos abiertos municipalidad de San José, Costa Rica\"\n# description: |\n#   Una introducción al uso del API de datos abiertos de la muni de San José\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n#   - name: Erick Calderón Morales\n#     url: https://github.com/ecamo19\n# date: 2018-01-13 \n# creative_commons: CC BY-NC\n# preview: images/city.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---\nGracias a la iniciativa de Gobierno Abierto de Costa Rica tenemos la posibilidad de obtener datos de diferentes entes a través de la conexión con API’s.\nEsto nos da la posibilidad de no pasar por engorrosos procesos de limpiar datos a partir de formatos casi imposibles como pdf’s, .csv extravagantes u otros formatos difíciles de trabajar.\nEn este caso vamos a utilizar el lenguaje de programación R y el paquete junr de Frans van Dunné para conectarnos al API de la municipalidad de San José y revisar qué datos se encuentran disponibles."
  },
  {
    "objectID": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#referencias",
    "href": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#referencias",
    "title": "Datos abiertos municipalidad de San José, Costa Rica",
    "section": "Referencias",
    "text": "Referencias\n\nvignette del paquete junr\nPágina desarrolladores Municipalidad de San José\nGobierno abierto Costa Rica"
  },
  {
    "objectID": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#querés-revisar-más-información",
    "href": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#querés-revisar-más-información",
    "title": "Datos abiertos municipalidad de San José, Costa Rica",
    "section": "¿Querés revisar más información?",
    "text": "¿Querés revisar más información?\nMi compañero Erick Calderón y yo estamos trabajando en un proyecto donde pretendemos crear más tutoriales sobre uso de datos abiertos del gobierno de Costa Rica a través de API’s y el lenguaje de programación R. Si querés contribuir, tenés preguntas o una idea podés revisar nuestro proyecto en Github"
  },
  {
    "objectID": "posts/2022-09-11-using-nvim-for-r-users/index.html",
    "href": "posts/2022-09-11-using-nvim-for-r-users/index.html",
    "title": "Using Neovim for R Users",
    "section": "",
    "text": "There is a ton of tutorials in the internet about this, but after trying several times, the steps that worked for me are the following:\n\nsudo apt install neovim -y\n\nThen you can validate the version with:\n\nnvim --version\n\nNow that we have nvim installed in our computer, it’s time to configure it. First you need to create the config file that would be in the path ~/.config/nvim/\n\n# Create directory\nmkdir ~/.config/nvim/\ncd ~/.config/nvim/\n\n# Create nvim config file\nnvim init.vim\n\nFrom there, you will see an empty file. We are going to add some configuration. There are many options to adapt nvim to your needs and lots of examples out there. Here I’m going to use a basic configuration so you can get an idea on what you can do.\nTo understand the file, take notes on this:\n\nEvery \" means that the line is a comment\nAll other lines without the \" are instructions to set your configuration\nPlug means that you want to use a Plugin. You will need a plugin to manage these. (More on this later)\n\nThis is what a basic config file would look like:\n\n\" Cursor as a block\nset guicursor=\n\n\" Use relative numbers in files\nset relativenumber\n\n\" Line where I'm positioned is the real line number\nset nu\n\n\" No saving or keeping buffer in the background\nset hidden\n\n\" Indentetation configuration\nset tabstop=4 softtabstop=4\nset shiftwidth=4\nset expandtab\nset smartindent\n\n\" Start scrolling until 8 spaces away\nset scrolloff=8\n\n\" Create extra column\nset signcolumn=yes\n\n\" Mark 80 characters line\nset colorcolumn=80\n\n\" Set encoding\nset encoding=utf-8\n\n\" Plugins\ncall plug#begin()\nPlug 'jalvesaq/Nvim-R'\nPlug 'preservim/nerdtree'\nPlug 'tpope/vim-fugitive'\nPlug 'ncm2/ncm2'\nPlug 'gaalcaras/ncm-R'\ncall plug#end()\n\nA good idea for me is that, when I add a new line of configuration, I will add a comment stating what that command is mean for. That way, it will be easy for me to remember what I was trying to achieve when I made the change.\n\n\nIn the init.vim file above, I included already some of the plugins that I want to use when working with nvim. When using the plugins, these should be in the middle of this call:\n\ncall plug#begin('~/.vim/plugged')\n\ncall plug#end()\n\nNow, you can see that they are included in the init.vim file, but still are not installed. For this, the first step is to find out a plugin manager.\nThe one that I like is vim-plug. To install it, you will need to:\n\nsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n\nAfter the vim-plug is installed, you will need to go back to your init.vim document. Then install the rest of plugins with:\n\n:PlugInstall\n\nWhen installing the rest of the plugins, you will see something similar to:\n\n\n\n\n\nIf I want to know which pluggins are installed, with the following vim-plug command we can check them:\n\n:PlugStatus"
  },
  {
    "objectID": "posts/2022-09-11-using-nvim-for-r-users/index.html#instaling-plug-ins",
    "href": "posts/2022-09-11-using-nvim-for-r-users/index.html#instaling-plug-ins",
    "title": "Using Neovim for R Users",
    "section": "",
    "text": "In the init.vim file above, I included already some of the plugins that I want to use when working with nvim. When using the plugins, these should be in the middle of this call:\n\ncall plug#begin('~/.vim/plugged')\n\ncall plug#end()\n\nNow, you can see that they are included in the init.vim file, but still are not installed. For this, the first step is to find out a plugin manager.\nThe one that I like is vim-plug. To install it, you will need to:\n\nsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n\nAfter the vim-plug is installed, you will need to go back to your init.vim document. Then install the rest of plugins with:\n\n:PlugInstall\n\nWhen installing the rest of the plugins, you will see something similar to:\n\n\n\n\n\nIf I want to know which pluggins are installed, with the following vim-plug command we can check them:\n\n:PlugStatus"
  },
  {
    "objectID": "posts/2024-08-28-batches_gee/index.html",
    "href": "posts/2024-08-28-batches_gee/index.html",
    "title": "A Step-by-Step Guide to Exporting ‘Large’ Datasets to Google Earth Engine via Python",
    "section": "",
    "text": "Have you ever found yourself pre-processing a local geodatabase, expecting to use the cleaned version on Google Earth Engine (GEE), only to get stuck when you try to export it as an asset? Most likely, you exceed the quota limit on GEE and saw this message: ee.ee_exception.EEException: Request payload size exceeds the limit: 10485760 bytes.\nThis limitation can be frustrating, especially when you want to maintain a Python-based workflow without resorting to manual uploads (i.e. saving your cleaned data to a .shp file and uploading it through the GEE Asset Manager in the Code Editor). In this tutorial, we’ll explore a programmatic solution to overcome GEE’s upload limit.\nWe’ll work on a approach that allows us to:"
  },
  {
    "objectID": "posts/2024-08-28-batches_gee/index.html#setting-up-the-environment",
    "href": "posts/2024-08-28-batches_gee/index.html#setting-up-the-environment",
    "title": "A Step-by-Step Guide to Exporting ‘Large’ Datasets to Google Earth Engine via Python",
    "section": "Setting Up the Environment",
    "text": "Setting Up the Environment\nBefore we dive into the main process, let’s set up our environment and import the necessary libraries and initialize GEE:\n\nimport geopandas as gpd\nimport os\nimport sys\nimport janitor\nimport ee\nimport json\nimport math\n\n# Initialize Google Earth Engine\nee.Initialize()"
  },
  {
    "objectID": "posts/2024-08-28-batches_gee/index.html#merging-assets-in-gee",
    "href": "posts/2024-08-28-batches_gee/index.html#merging-assets-in-gee",
    "title": "A Step-by-Step Guide to Exporting ‘Large’ Datasets to Google Earth Engine via Python",
    "section": "Merging Assets in GEE",
    "text": "Merging Assets in GEE\nNow that we have all our data in GEE as separate assets, we need to merge them into a single dataset. First, we’ll create a list of all the batches already created. We’ll loop through the total number of batches to get the unique batch IDs in a list. Afterward, iterate through each batch and merge them into a single object. This object will exist in GEE but it’s not saved. That’s why we’ll need to export it as the new merged asset.\n\n# Create a list of all batch asset IDs\nbatch_asset_ids = [f'projects/ee-ronnyale/assets/reservoirs_batch_{i+1}' for i in range(num_batches)]\n\n# Merge all batches into a single FeatureCollection\nreservoirs_fc = ee.FeatureCollection(batch_asset_ids[0])\nfor asset_id in batch_asset_ids[1:]:\n    batch_fc = ee.FeatureCollection(asset_id)\n    reservoirs_fc = reservoirs_fc.merge(batch_fc)\n\nprint(f'Total number of features in merged collection: {reservoirs_fc.size().getInfo()}')\n\n# Export the merged collection as a new asset\nexportTask = ee.batch.Export.table.toAsset(\n    collection = reservoirs_fc,\n    description = 'Merged Reservoirs',\n    assetId = 'projects/ee-ronnyale/assets/reservoirs_merged'\n)\nexportTask.start()\nprint(\"Merged asset export task started. Check your GEE Tasks tab for progress.\")\n\nTotal number of features in merged collection: 8101\nMerged asset export task started. Check your GEE Tasks tab for progress.\n\n\n\n\nI like to print the final number of observations, so I can be sure that all the original observations are there. This could be translated into an automated test for the project.\nThis step creates a new single asset that contains all our data. We can use it later in our analysis as a single FeatureCollection."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "",
    "text": "In this blogpost, I will guide you through the process of installing Neovim on Ubuntu 22.04, configuring it with Lua, and using Packer as a plugin manager. Our goal is to create an optimized setup that allows for smooth R programming from the terminal.\nIf you have previously read my blogposts, you might be familiar with the configuration using vim-plug for managing plugins. However, in this blogpost, we will take a different approach by utilizing Lua for our Neovim configuration and Packer for plugin management. Lua provides a more organized and flexible way to configure Neovim, while Packer simplifies the installation and management of plugins.\nLet’s get started with the installation and configuration process. If you are familiar with some of the steps, feel free to jump ahead to the specific sections you need.\nBy the end of this tutorial, you will have a customized Neovim setup that enhances your R programming experience and boosts your productivity.\nOur results will be something similar to:\n\nOn next blogposts, I will describe how to take this further."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#files-structure",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#files-structure",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Files structure",
    "text": "Files structure\nWe aim to have the following configuration files structure:\nIn the directory ~/.config/nvim, we should have:\n | - init.lua (Entry point for nvim)\n |\n | - lua/\n    | - plugins.lua (For our packer plugins installations)\n    | - settings.lua (Our general nvim configuration)\n |\n | - plugin/\n    | - plugin_a.lua (Configurations for a determined plugin)\n    | - plugin_b.lua (Configurations for a determined plugin)\n    | - packer_compiled.lua (File generated automatically by Packer)\nThis is not mandatory, but is one of the configurations that I find really nice to organize everything being specific on the aim of the instructions."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#installing-neovim",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#installing-neovim",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Installing Neovim",
    "text": "Installing Neovim\n\nOpen your terminal\nRun the following command:\n\n\nsudo apt install neovim"
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#configuring-our-nvim-with-lua",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#configuring-our-nvim-with-lua",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Configuring our nvim with lua",
    "text": "Configuring our nvim with lua\n\nCreate the config directory for nvim:\n\n\nmkdir /home/user_name/.config/nvim\n\nRemember to replace user_name with your actual workstation user name.\n\n\n\nCreating nvim directory in .config\n\n\n\nCreate the init.lua file:\n\n\n# Create file\nnvim init.lua\n\n\nAdd the following requirements:\n\n\n# Requirements\nrequire('plugins')\nrequire('settings')\n\n These requirements reference the files that we are about to create: plugins.lua and settings.lua. Both files should be placed in the lua/ directory.\nThe init.lua file acts as the entry point for loading the settings and plugins. If you make changes to the plugins, such as adding a new one, you can revisit the init.lua file and invoke :PackerSync to synchronize the plugins. However, for now, you don’t need to worry about this step."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#configuring-general-settings-for-lua",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#configuring-general-settings-for-lua",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Configuring General Settings for Lua",
    "text": "Configuring General Settings for Lua\nAfter creating our init.lua file, it’s time to configure the general settings to customize the behavior of the nvim editor according to our preferred style.\nTo organize these settings effectively, we will utilize the lua/settings.lua file. This file will serve as a central location for all our general settings.\nTo set up the lua/settings.lua file, follow these steps:\n\nCreate the lua/ directory inside the nvim/ directory if it doesn’t already exist:\n\n\nmkdir lua\n\n\nCreate the settings.lua file within the lua/ directory.\n\n\nnvim lua/settings.lua\n\nMake sure that the file name matches the one specified in your init.lua file’s requirements.\nWhen doing the step above, probably you will find an error:\n\n\n\nError message when modifyng the settings.lua file\n\n\nSince we are currently in the process of creating the required files, it’s normal to encounter an error when Neovim tries to locate the non-existent files. However, this is not a cause for concern for now.\nConsider adding the following basic configuration options to the settings.lua file:\n\nvim.opt.number = true\nvim.opt.relativenumber = true\nvim.opt.ignorecase = true\nvim.opt.smartcase = true\nvim.opt.breakindent = true\nvim.opt.tabstop = 4\nvim.opt.shiftwidth = 4\nvim.opt.colorcolumn = \"80\"\n\n\n\n\nSettings for nvim in the file settings.lua\n\n\nThese configurations will enable line numbers, relative line numbers, case-insensitive searching, smart case sensitivity, indentation on line breaks, set the tab width to 4 spaces, set the indent width to 4 spaces, and display a color column at column 80.\nFeel free to adjust these settings according to your preferences."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#installing-packer",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#installing-packer",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Installing packer",
    "text": "Installing packer\nTo install Packer, a plugin manager for Neovim, follow these steps:\n\nCreate the plugins.lua file inside the lua folder\n\n\nnvim lua/plugins.lua\n\nAgain, you will find the same warning as above, but just hit enter.\n\nCopy and paste the following code into the file. This code checks if Packer is already installed and, if not, it installs it automatically when you start Neovim.\n\n\n local ensure_packer = function()\n  local fn = vim.fn\n  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'\n  if fn.empty(fn.glob(install_path)) &gt; 0 then\n    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})\n    vim.cmd [[packadd packer.nvim]]\n    return true\n  end\n  return false\nend\n\nlocal packer_bootstrap = ensure_packer()\n\n\n\n\nPacker code snippet for installation\n\n\nWith these code snippets in place, whenever you start Neovim, it will automatically check if Packer is installed. If it’s not found, it will be cloned from the official repository and set up for use.\nDon’t close the file yet! We are going to add a couple of things more in the next section."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#installing-plugins",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#installing-plugins",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Installing plugins",
    "text": "Installing plugins\nNow you can proceed with adding the desired plugins to the lua/plugins.lua file. Here we are going to add a couple, with special attention to Nvim-R.\n\nOpen the lua/plugins.lua file in your preferred text editor.\nInside the require(‘packer’).startup(function() block, you can add the plugins you want to install. For example, let’s add two plugins: gruvbox for a colorscheme and Nvim-R for R integration. Modify your lua/plugins.lua file as follows:\n\n\nreturn require('packer').startup(function()\n        -- packer can manage itself\n        use 'wbthomason/packer.nvim'\n\n        -- colorscheme\n        use 'gruvbox-community/gruvbox'\n        \n        -- nvim-r\n        use 'jalvesaq/Nvim-R'\n\nend)\n\n\nSave the changes to your lua/plugins.lua file.\n\nAfter adding the plugins, you can go back to your init.lua file and check if everything is correct. To install and update all the plugins, run the following command inside Neovim:\n\n:PackerSync\n\nThis will trigger the installation and updating of your plugins.\nOnce the process is complete, you can quit Neovim by running :q in the Packer window and :q in the init.lua file.\nNow, your plugins should be successfully installed and ready to use in Neovim."
  },
  {
    "objectID": "posts/2023-06-17-nvim_lua_packer/index.html#configure-settings-for-nvim-r",
    "href": "posts/2023-06-17-nvim_lua_packer/index.html#configure-settings-for-nvim-r",
    "title": "Configuring nvim with Lua and packer for R",
    "section": "Configure settings for Nvim-R",
    "text": "Configure settings for Nvim-R\nAt this point you should have the following structure:\n\n\n\nFile structure for our settings\n\n\nFor this, we need to create a file with the name of the plugin. We are going to configure a couple of settings for our nvim-r plugin.\n\nNavigate to the plugin/ folder in your Neovim configuration directory.\nCreate a new file called nvimr.lua inside the plugin/ folder.\nOpen the nvimr.lua file and add the following configurations:\n\n\n-- To use spacebar for running code\nvim.cmd([[\n  let g:markdown_fenced_languages = ['r', 'python']\n  let g:rmd_fenced_languages = ['r', 'python']\n\n  if has(\"gui_running\")\n      inoremap &lt;C-Space&gt; &lt;C-x&gt;&lt;C-o&gt;\n  else\n      inoremap &lt;Nul&gt; &lt;C-x&gt;&lt;C-o&gt;\n  endif\n  vmap &lt;Space&gt; &lt;Plug&gt;RDSendSelection\n  nmap &lt;Space&gt; &lt;Plug&gt;RDSendLine\n]])\n\n\n-- R filetypes\nvim.cmd([[\nautocmd BufNewFile,BufRead *.Rmd set ft=rmd\nautocmd BufNewFile,BufRead *.rmd set ft=rmd\nautocmd BufNewFile,BufRead *.qmd set ft=rmd\n]])\n\nThe above configurations will:\n\nSet the fenced code block languages to ‘r’ and ‘python’ for R Markdown and quarto files.\nEnable the space bar as a shortcut for running lines of code.\nSet the key mapping &lt;Space&gt; for visual mode to send the selected lines to the R terminal.\nSet the key mapping &lt;Space&gt; for normal mode to send the current line to the R terminal.\nSet the filetypes to rmd for .Rmd, .rmd, and .qmd files.\n\nSave the changes to the nvimr.lua file.\nWith these settings in place, Nvim-R will be configured to enhance your workflow with .rmd and .qmd files, providing a convenient way to run R code within Neovim."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html",
    "href": "posts/2023-12-25-modis-bitstring/index.html",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "",
    "text": "While working with some MODIS Surfance Reflectance product images, my goal was to\ncalculate 4 vegetation indices to estimate Gross Primary Production. Alongside the standard considerations of selecting images free from snow or clouds, I knew that every pixel comes with Quality Assurance (QA) information. This QA data is important to decide whether to include or exclude certain pixels from the analysis.\nNonetheless, I found myself confused about how to perform this task on the many pixels I had, and furthermore, how to deal with the transformation of bits into categories that I could understand and then filter in R according to their quality.\nLuckily there were documentation sources available that I could go through to understand and make progress on my project. One particularly helpful resource was a blog post by Steve Mosher, where I got a better understanding of what needed to be done. So I wrote down everything it worked for me and finally put it here, step by step.\n\n\n\n\n\n\nNote\n\n\n\nThis is an exercise to understand how the binary conversion works. There are easier ways to work with satellite images and their quality assurance data."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#variables-with-bit-strings",
    "href": "posts/2023-12-25-modis-bitstring/index.html#variables-with-bit-strings",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Variables with bit strings",
    "text": "Variables with bit strings\nThere are 4 variables in the dataset with a bitmask that needs to be converted:\n\nstate_1km\ngflags\nqc_500m\nq_scan\n\nAccording to the technical documentation, this variables contain information about the state of the atmosphere and surface at a 1 km resolution (state_1km), geolocation of the pixel (gflags), quality of the surface reflectance data for bands 1-7 (qc_500m), and info about the scan level quality of the data (q_scan)\nLet’s read the dataset to explore what do we have originally in here\n\n# Data\nreflectance_500 &lt;- \n  readRDS(here(\"posts/2023-12-25-modis-bitstring/data/borden_modis_reflectance_500_clean.rds\"))\n\n\nHow many unique values do I have per each of the quality variables?\n\nreflectance_500 |&gt;\n  select(state_1km, gflags, qc_500m, q_scan) |&gt; \n  purrr::map(~unique(.))\n\n$state_1km\n [1]  1033 40969  8392  1034 40970  5384  1289  1801 45068  1545  8397  8398\n[13]  1032  8396  8393  5128 40973 40974 45064  8394 32781   206 36872 32778\n[25] 32777  5640 36876 32776 45066  8334   200   138   136     8    72  8264\n[37]  1544  8332  1802  1288  8328  1546  8268  8330  8205    76   204   141\n[49]   140  8204 40972  8266   137  1290    74  1800 32780  5896 40968   205\n[61]   202   201  8329  8270  5385  5898  5642\n\n$gflags\n[1] 0\n\n$qc_500m\n [1] 1073741824 1073968181 1073954817 1075838976 1073968129 1073755137\n [7] 1073755189 1075852341 1076065281 1946383413 1073969013 1073954869\n[13] 1075852289 1076065333 1076051969 1075576832 1075590145 1075803189\n\n$q_scan\n [1] 14  8  9  2  0  6 15  3 13 11 12  1  7 10  5  4\n\n\nSo, in our dataset, state_1km has 67 distinct values, gflags variable has 1 so we are not going to use this one, qc_500m has 18 distinct values, and q_scan variable has 16 unique values. We need to convert this integers into bits and then, make sense of those bits. This is going to be our first part of the exploration."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#how-can-i-apply-the-idea-to-our-modis-data",
    "href": "posts/2023-12-25-modis-bitstring/index.html#how-can-i-apply-the-idea-to-our-modis-data",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "How can I apply the idea to our MODIS data?",
    "text": "How can I apply the idea to our MODIS data?\nWe’ve covered the basics of understanding bits, binary conversion, and interpretation. But how do we put this knowledge to use with our dataset? This is where Steve Mosher’s blog post comes in handy.\nLet’s start by taking a single value from the qc_500m variable in our dataset: 1075803189. Here are the steps we’ll follow:\n\nUtilize the intToBits() function to obtain the binary representation.\nShorten the lengthy bit string to only include the necessary bits.\nReverse the order of the bits.\n\n\n# Using one bitmask value from the dataset\nbits &lt;- as.integer(intToBits(1075803189)[1:32])\nbits\n\n [1] 1 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0\n\n# Reverse\nbits[32:1]\n\n [1] 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1\n\n\nOk! It looks like it works. But I’m not sure, so let’s perform the same process but using the example from the USGS video."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#process-validation",
    "href": "posts/2023-12-25-modis-bitstring/index.html#process-validation",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Process validation",
    "text": "Process validation\nIn the USGS video explanation, they show the binary conversion process with an example. I’m going to use the same integer value 1131675649 to validate if our code steps work as expected.\n\n\n\nUSGS video integer example\n\n\nThe bit string obtained from the binary conversion should be:\n\n\n\nUSGS bit string example\n\n\nThat bit string should be matched with the categories assigned and described in the documentation:\n\n\n\nUSGS bit string quality categories\n\n\n\n#  Using the example value from video\nbinary_conversion &lt;- as.integer(intToBits(1131675649)[1:32])\nbit_string &lt;- binary_conversion[32:1]\n\n# This one is the result of the binary transformation from the video\nvalidation &lt;- c(0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)\n\n# Check if object is the same as the one written by hand\nstopifnot(bit_string == validation)\n\nSuccess! Our results does match the final output. Now that I know for sure our code works, I’m going to apply the same logical conditions to the complete dataset."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#code-to-apply-the-bit-string-conversion-to-the-variables",
    "href": "posts/2023-12-25-modis-bitstring/index.html#code-to-apply-the-bit-string-conversion-to-the-variables",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Code to apply the bit string conversion to the variables",
    "text": "Code to apply the bit string conversion to the variables\nNow that I understand the steps required for the conversion, I need to further develop the code to apply it to each variable with a bit mask. On this first try, I will do it with the variable qc_500m.\nFor this variable, I’ll create a dataset containing the qc_ints variable, which includes the 18 unique integer values from qc_500m and an additional observation from the USGS video example for test validation. Next, I’ll add 32 more variables, each representing a bit from the binary conversion process.\n\n## Create column with unique values and add one validation (from the video)\nqc_data &lt;- data.frame(qc_ints = c(unique(reflectance_500$qc_500m), 1131675649))\n\n## Create empty data frame. This case is 32 given that the variable\n## `qc_500m` have 32 bits\nfor (i in c(31:0)) {\n  qc_data[, paste0(\"bit_\", i)] &lt;- NA\n}\n\nHere is how the data frame looks like:\n\npaged_table(qc_data)\n\n\n\n  \n\n\n\nSo far, we have a dataframe with 33 variables (one with the original integers values and 32 more to fill with the bit strings) and 19 observations. Now I can loop through each of the bits variables filling them with the values from the binary conversion result from the original integers\n\n# Loop for obtaining bit string from unique values in the variable\nz &lt;- 1\nfor (i in qc_data$qc_ints) {\n  # print(i)\n  transformed &lt;- as.integer(intToBits(i)[1:32])\n  qc_data[z, 2:33] &lt;- transformed[32:1]\n  z &lt;- z + 1\n}\n\n# Check the data frame\npaged_table(qc_data)\n\n\n\n  \n\n\n\nEvery bit variable is filled with 0's or 1's. Looks good, but I want to validate with the USGS example observation we added at the beginning if I’m obtaining the correct bit strings:\n\n## Create test according to value in video\nprocess_test &lt;- qc_data |&gt; \n  filter(qc_ints == 1131675649) |&gt;\n  select(-qc_ints) |&gt;\n  unite(col = \"new\", bit_31:bit_0, sep = \"\") |&gt; \n  pull() \n\nstopifnot(process_test == \"01000011011101000000000000000001\")\n\nWith the code now successfully converting binary values, we can proceed to categorize the quality of each pixel based on the documentation guidelines."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#qc_500m-complete-bit-string-categories",
    "href": "posts/2023-12-25-modis-bitstring/index.html#qc_500m-complete-bit-string-categories",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "qc_500m complete bit string categories",
    "text": "qc_500m complete bit string categories\nThe following code chunk includes all the steps needed to incorporate the all the categories specified in the MODIS documentation. First, it merges the required bits into columns, then it generates the categorizations based on the documentation guidelines. The result is a data frame that contains the categorized values corresponding to the original integers in our variable.\nFrom the documentation, we have which bit strings should be considered together to classify the values into categories. Based on those bit positions, we are going to unite the columns to obtain the bit combination. For example, for the Parameter Name MODLAND QA bits, we have to take the bit in position 0 and the bit position 1, which can have 4 different combinations: 00, 01, 10, and 11. Each of those 4 combinations will be categorized into their respective categories.\n\n\n\nCoarse Resolution Surface Reflectance Band Quality Description\n\n\n\nqc_500_description &lt;- qc_data |&gt; \n  unite(col = \"modland\", c(\"bit_1\", \"bit_0\"), sep = \"\") |&gt; \n  unite(col = \"band_1\", \n        c(\"bit_5\", \"bit_4\", \"bit_3\", \"bit_2\"), sep = \"\") |&gt; \n  unite(col = \"band_2\", \n        c(\"bit_9\", \"bit_8\", \"bit_7\", \"bit_6\"), sep = \"\") |&gt; \n  unite(col = \"band_3\", \n        c(\"bit_13\", \"bit_12\", \"bit_11\", \"bit_10\"), sep = \"\") |&gt; \n  unite(col = \"band_4\", \n        c(\"bit_17\", \"bit_16\", \"bit_15\", \"bit_14\"), sep = \"\") |&gt; \n  unite(col = \"band_5\", \n        c(\"bit_21\", \"bit_20\", \"bit_19\", \"bit_18\"), sep = \"\") |&gt; \n  unite(col = \"band_6\", \n        c(\"bit_25\", \"bit_24\", \"bit_23\", \"bit_22\"), sep = \"\") |&gt;\n  unite(col = \"band_7\", \n        c(\"bit_29\", \"bit_28\", \"bit_27\", \"bit_26\"), sep = \"\") |&gt; \n  mutate(modland_qa = case_when(\n    modland == \"00\" ~ \"ideal quality - all bands\",\n    modland == \"01\" ~ \"less than ideal quality - some or all bands\",\n    modland == \"10\" ~ \"product not produced due to cloud effects\",\n    modland == \"11\" ~ \"product not produced for other reasons\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band1_qa = case_when(\n    band_1 == \"0000\" ~ \"highest_quality\",\n    band_1 == \"0111\" ~ \"noisy detector\",\n    band_1 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_1 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_1 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_1 == \"1011\" ~ \"missing input\",\n    band_1 == \"1100\" ~ \"internal constant used\",\n    band_1 == \"1101\" ~ \"correction out of bounds\",\n    band_1 == \"1110\" ~ \"L1B data faulty\",\n    band_1 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band2_qa = case_when(\n    band_2 == \"0000\" ~ \"highest_quality\",\n    band_2 == \"0111\" ~ \"noisy detector\",\n    band_2 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_2 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_2 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_2 == \"1011\" ~ \"missing input\",\n    band_2 == \"1100\" ~ \"internal constant used\",\n    band_2 == \"1101\" ~ \"correction out of bounds\",\n    band_2 == \"1110\" ~ \"L1B data faulty\",\n    band_2 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band3_qa = case_when(\n    band_3 == \"0000\" ~ \"highest_quality\",\n    band_3 == \"0111\" ~ \"noisy detector\",\n    band_3 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_3 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_3 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_3 == \"1011\" ~ \"missing input\",\n    band_3 == \"1100\" ~ \"internal constant used\",\n    band_3 == \"1101\" ~ \"correction out of bounds\",\n    band_3 == \"1110\" ~ \"L1B data faulty\",\n    band_3 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band4_qa = case_when(\n    band_4 == \"0000\" ~ \"highest_quality\",\n    band_4 == \"0111\" ~ \"noisy detector\",\n    band_4 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_4 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_4 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_4 == \"1011\" ~ \"missing input\",\n    band_4 == \"1100\" ~ \"internal constant used\",\n    band_4 == \"1101\" ~ \"correction out of bounds\",\n    band_4 == \"1110\" ~ \"L1B data faulty\",\n    band_4 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band5_qa = case_when(\n    band_5 == \"0000\" ~ \"highest_quality\",\n    band_5 == \"0111\" ~ \"noisy detector\",\n    band_5 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_5 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_5 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_5 == \"1011\" ~ \"missing input\",\n    band_5 == \"1100\" ~ \"internal constant used\",\n    band_5 == \"1101\" ~ \"correction out of bounds\",\n    band_5 == \"1110\" ~ \"L1B data faulty\",\n    band_5 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band6_qa = case_when(\n    band_6 == \"0000\" ~ \"highest_quality\",\n    band_6 == \"0111\" ~ \"noisy detector\",\n    band_6 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_6 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_6 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_6 == \"1011\" ~ \"missing input\",\n    band_6 == \"1100\" ~ \"internal constant used\",\n    band_6 == \"1101\" ~ \"correction out of bounds\",\n    band_6 == \"1110\" ~ \"L1B data faulty\",\n    band_6 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(band7_qa = case_when(\n    band_7 == \"0000\" ~ \"highest_quality\",\n    band_7 == \"0111\" ~ \"noisy detector\",\n    band_7 == \"1000\" ~ \"dead detector, data interpolated in L1B\",\n    band_7 == \"1001\" ~ \"solar zenith &gt;= 86 degrees\",\n    band_7 == \"1010\" ~ \"solar zenith &gt;= 85 and &lt; 86 degrees\",\n    band_7 == \"1011\" ~ \"missing input\",\n    band_7 == \"1100\" ~ \"internal constant used\",\n    band_7 == \"1101\" ~ \"correction out of bounds\",\n    band_7 == \"1110\" ~ \"L1B data faulty\",\n    band_7 == \"1111\" ~ \"not processed due to deep ocean or clouds\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(atmospheric_correction = ifelse(bit_30 == 0, \"no\", \"yes\"),\n         adjacency_correction = ifelse(bit_31 == 0, \"no\", \"yes\"))\n\npaged_table(qc_500_description)\n\n\n\n  \n\n\n\nThat’s a big table, so to understand better, let’s check just the MODLAND QA bits categorization:\n\nqc_500_description |&gt; \n        select(modland, modland_qa, qc_ints) |&gt; \n        paged_table()\n\n\n\n  \n\n\n\n\nFrom our dataset, I obtained two of the categories from the total 4. The qc_ints have 19 different observations in total, but those integers will give us information for the rest of the parameters."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#proof-of-concept-for-16-bits",
    "href": "posts/2023-12-25-modis-bitstring/index.html#proof-of-concept-for-16-bits",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Proof of concept for 16 bits",
    "text": "Proof of concept for 16 bits\nSo far I have all the steps to perform the binary conversion for a variable that consist of 32 bits. However, other variables may use fewer bits, such as state_1km which uses 16 bits. Here, I’m going to apply the same process described above to this variable, with some changes in the code indicating the quantity of bits to be used.\n\n## Check unique values and add one validation (from the video)\nqc_data &lt;- data.frame(qc_ints = c(unique(reflectance_500$state_1km),\n                                  1131675649))\n\n## Create empty data frame. This case is 32 given that the variable\n## `qc_500m` have 32 bits\nfor (i in c(15:0)) {\n  qc_data[, paste0(\"bit_\", i)] &lt;- NA\n}\n\n# Loop for obtaining bit string from unique values in the variable\nz &lt;- 1\nfor (i in qc_data$qc_ints) {\n  # print(i)\n  transformed &lt;- as.integer(intToBits(i)[1:16])\n  qc_data[z, 2:17] &lt;- transformed[16:1]\n  z &lt;- z + 1\n}\n\n## Create test according to value in video\nprocess_test &lt;- qc_data |&gt; \n  filter(qc_ints == 1131675649) |&gt;\n  select(-qc_ints) |&gt;\n  unite(col = \"new\", bit_15:bit_0, sep = \"\") |&gt; \n  pull() \n\nstopifnot(process_test == \"0000000000000001\")\n\nLooks like we were able to successfully pass our test. Let’s check how the dataset with the binary conversion looks like:\n\npaged_table(qc_data)"
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#testing-the-function-with-state_1km",
    "href": "posts/2023-12-25-modis-bitstring/index.html#testing-the-function-with-state_1km",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Testing the function with state_1km",
    "text": "Testing the function with state_1km\nLet’s use the function on the state_1km variable to check if it works. Then, let’s compare the result with the dataset we created step by step to validate if we can obtain the same result.\n\n# Obtain the bit string using the function\nqc_data_function &lt;- obtain_bit_qc_df(variable = \"state_1km\", bits = 16)\n\n# Compare last qc_data from state_1km and new qc_data created with function\nstopifnot(qc_data$bit_14 == qc_data_function$bit_14)\n\n# Check dimensions\nstopifnot(dim(qc_data) == dim(qc_data_function))\n\nSeems that it works! With the function we obtained the same dimensions of the dataset than before. Let’s now create the categories for each of the bit strings\n\n# Create the categories according to documentation\nstate_1km__description &lt;- qc_data_function |&gt; \n  unite(col = \"cloud_state\", c(\"bit_1\", \"bit_0\"), sep = \"\") |&gt; \n  unite(col = \"land_water_flag\",\n        c(\"bit_5\", \"bit_4\", \"bit_3\"), sep = \"\") |&gt;\n  unite(col = \"aerosol_quantity\",\n        c(\"bit_7\", \"bit_6\"), sep = \"\") |&gt;\n  unite(col = \"cirrus_detected\",\n        c(\"bit_9\", \"bit_8\"), sep = \"\") |&gt;\n  mutate(cloud_state_qa = case_when(\n    cloud_state == \"00\" ~ \"clear\",\n    cloud_state == \"01\" ~ \"cloudy\",\n    cloud_state == \"10\" ~ \"mixed\",\n    cloud_state == \"11\" ~ \"not set, assumed clear\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(cloud_shadow_qa = ifelse(bit_2 == 1, \"yes\", \"no\")) |&gt; \n    mutate(land_water_qa = case_when(\n    land_water_flag == \"000\" ~ \"shallow ocean\",\n    land_water_flag == \"001\" ~ \"land\",\n    land_water_flag == \"010\" ~ \"ocean coastlines and lake shorelines\",\n    land_water_flag == \"011\" ~ \"shallow inland water\",\n    land_water_flag == \"100\" ~ \"ephemeral water\",\n    land_water_flag == \"101\" ~ \"deep inland water\",\n    land_water_flag == \"110\" ~ \"continental/moderate ocean\",\n    land_water_flag == \"111\" ~ \"deep ocean\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n    mutate(aerosol_quantity_qa = case_when(\n    aerosol_quantity == \"00\" ~ \"climatology\",\n    aerosol_quantity == \"01\" ~ \"low\",\n    aerosol_quantity == \"10\" ~ \"average\",\n    aerosol_quantity == \"11\" ~ \"high\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n    mutate(cirrus_detected_qa = case_when(\n    cirrus_detected == \"00\" ~ \"none\",\n    cirrus_detected == \"01\" ~ \"small\",\n    cirrus_detected == \"10\" ~ \"average\",\n    cirrus_detected == \"11\" ~ \"high\",\n    TRUE ~ \"No info, please validate bit conversion\"\n  )) |&gt; \n  mutate(cloud_flag_qa = ifelse(bit_10 == 1, \"cloud\", \"no cloud\"),\n         fire_flag_qa = ifelse(bit_11 == 1, \"fire\", \"no fire\"),\n         snow_ice_flag_qa = ifelse(bit_12 == 1, \"yes\", \"no\"),\n         pixel_adjacent_cloud_qa = ifelse(bit_13 == 1, \"yes\", \"no\"),\n         salt_pan_qa = ifelse(bit_14 == 1, \"yes\", \"no\"),\n         snow_mask_qa = ifelse(bit_15 == 1, \"yes\", \"no\"))\n\nNow, let’s check the resulting dataset:\n\nstate_1km__description |&gt; \n        select(-starts_with(\"bit\")) |&gt; \n        paged_table()"
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#testing-the-function-with-q_scan",
    "href": "posts/2023-12-25-modis-bitstring/index.html#testing-the-function-with-q_scan",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Testing the function with q_scan",
    "text": "Testing the function with q_scan\n\n# Obtain the bit string\nqc_data &lt;- obtain_bit_qc_df(variable = \"q_scan\", bits = 8)\n\n# Create the categories according to documentation\nq_scan_description &lt;- qc_data |&gt; \n  mutate(scan_quadrant_1 = ifelse(bit_0 == 1, \"yes\", \"no\"),\n         scan_quadrant_2 = ifelse(bit_0 == 1, \"yes\", \"no\"),\n         scan_quadrant_3 = ifelse(bit_0 == 1, \"yes\", \"no\"),\n         scan_quadrant_4 = ifelse(bit_0 == 1, \"yes\", \"no\"),\n         missing_obs_1 = ifelse(bit_1 == 1, \"same\", \"different\"),\n         missing_obs_2 = ifelse(bit_1 == 1, \"same\", \"different\"),\n         missing_obs_3 = ifelse(bit_1 == 1, \"same\", \"different\"),\n         missing_obs_4 = ifelse(bit_1 == 1, \"same\", \"different\"))\n\nq_scan_description |&gt; \n        paged_table()"
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#filter-by-state_1km",
    "href": "posts/2023-12-25-modis-bitstring/index.html#filter-by-state_1km",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Filter by state_1km",
    "text": "Filter by state_1km\nLet’s start with state_1km. Here I will get the categories we want that indicate the best possible observations in the dataset. One we have those observations, we will obtain the qc_ints values.\n\n# quality values from state_1km\n# bit 6-7 and bit 13 can be anything as regarded by richard\nstate_1km_highest_quality &lt;- state_1km__description |&gt;\n  filter(cloud_state_qa == \"clear\") |&gt; \n  filter(cloud_shadow_qa == \"no\") |&gt;\n  filter(land_water_qa == \"land\") |&gt; \n  filter(cirrus_detected_qa == \"none\") |&gt; \n  filter(bit_10 == \"0\") |&gt; \n  filter(fire_flag_qa == \"no fire\") |&gt; \n  filter(snow_ice_flag_qa == \"no\") |&gt; \n  filter(bit_14 == \"0\") |&gt; \n  filter(bit_15 == \"0\") |&gt; \n  # Select the qc_ints values as a vector\n  select(qc_ints) |&gt; \n  pull()\n\nstate_1km_highest_quality\n\n[1] 8392  200  136    8   72 8264 8328"
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#filter-by-qc_500m",
    "href": "posts/2023-12-25-modis-bitstring/index.html#filter-by-qc_500m",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Filter by qc_500m",
    "text": "Filter by qc_500m\n\n# quality values from qc_500\n# All should be 0 for all of the bits, except for \nqc_500_highest_quality &lt;- qc_500_description |&gt;\n  filter(modland_qa == \"ideal quality - all bands\") |&gt;\n  filter(band1_qa == \"highest_quality\") |&gt;\n  filter(band2_qa == \"highest_quality\") |&gt;\n  filter(band3_qa == \"highest_quality\") |&gt;\n  filter(band4_qa == \"highest_quality\") |&gt;\n  filter(band5_qa == \"highest_quality\") |&gt;\n  filter(band6_qa == \"highest_quality\") |&gt;\n  filter(band7_qa == \"highest_quality\") |&gt;\n  filter(atmospheric_correction == \"yes\") |&gt;\n  # filter(adjacency_correction == \"yes\") |&gt; \n  select(qc_ints) |&gt; \n  pull()\n\nqc_500_highest_quality\n\n[1] 1073741824"
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#filter-by-q_scan-and-gflags",
    "href": "posts/2023-12-25-modis-bitstring/index.html#filter-by-q_scan-and-gflags",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Filter by q_scan and gflags",
    "text": "Filter by q_scan and gflags\nFor our original dataset, the variable gflags has only one unique value, so it doesn’t provide much information. In the case of q_scan, we will exclude this variable from the analysis."
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#filtering-the-complete-data-with-selected-bitmasks",
    "href": "posts/2023-12-25-modis-bitstring/index.html#filtering-the-complete-data-with-selected-bitmasks",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Filtering the Complete Data with Selected Bitmasks",
    "text": "Filtering the Complete Data with Selected Bitmasks\nSo far, I have identified the bitmasks that indicate the highest quality, allowing me to filter out the remaining data from the reflectance_500 dataset.\n\nstate_1km_filter &lt;- reflectance_500 |&gt; \n  filter(state_1km %in% state_1km_highest_quality) |&gt; \n  nrow()\n\nstate_1km_filter\n\n[1] 4586\n\n\nThese numbers of observations represent the filtering based solely on the state_1km variable. Now, I will continue with the qc_500 variable:\n\nstate_1km_filter_qc_500 &lt;- reflectance_500 |&gt; \n  filter(state_1km %in% state_1km_highest_quality) |&gt; \n  filter(qc_500m %in% qc_500_highest_quality) |&gt; \n  nrow()\n\nstate_1km_filter_qc_500\n\n[1] 4319"
  },
  {
    "objectID": "posts/2023-12-25-modis-bitstring/index.html#some-plots-with-clean-reflectance_500-data",
    "href": "posts/2023-12-25-modis-bitstring/index.html#some-plots-with-clean-reflectance_500-data",
    "title": "MODIS pixel bit strings conversion with R",
    "section": "Some plots with clean reflectance_500 data",
    "text": "Some plots with clean reflectance_500 data\n\nreflectance_500 |&gt; \n  filter(state_1km %in% state_1km_highest_quality) |&gt; \n  select(date) |&gt; \n  # pull() |&gt; \n  mutate(year_month = zoo::as.yearmon(date)) |&gt; \n  ggplot(aes(x = date)) + \n  geom_histogram(bins = 30) +\n  scale_x_date(date_labels = \"%b%Y\", breaks = \"months\") +\n        theme_light(base_size = 12) +\n  theme(axis.text.x = element_text(angle = 90, h = 1)) +\n  labs(x = \"Date\",\n       y = \"Number of pixels\",\n       title = \"Borden  MODIS pixels per month after quality filtering\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes about creating and exploring data products",
    "section": "",
    "text": "A Step-by-Step Guide to Exporting ‘Large’ Datasets to Google Earth Engine via Python\n\n\n\nGEE\n\n\nbatch\n\n\nAPI\n\n\n\nIf you’ve encountered the dreaded Request payload size exceeds the limit error, you’re not alone.\n\n\n\nRonny A. Hernandez Mora\n\n\nSep 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMODIS pixel bit strings conversion with R\n\n\n\nMODIS\n\n\nR\n\n\nbits\n\n\n\nMODIS satellite images come with bit information regarding the quality of pixels. In this post, I’ll explore how to interpret these bits and categorize them for quality…\n\n\n\nRonny A. Hernandez Mora\n\n\nAug 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguring nvim with Lua and packer for R\n\n\n\nNeovim\n\n\nLinux\n\n\nR\n\n\nLua\n\n\npacker\n\n\n\nA blogpost on how to configure nvim with Lua to work with R.\n\n\n\nRonny A. Hernandez Mora\n\n\nJun 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorkflow to use R with Neovim\n\n\n\nNeovim\n\n\nLinux\n\n\nR\n\n\n\nNotes on how to work with Neovim to use it as an IDE for R with the most used commands and functionalities.\n\n\n\nRonny A. Hernandez Mora\n\n\nFeb 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPackages citation and zotero\n\n\n\nR packages\n\n\nZotero\n\n\n\nA manual way to create the BibTex citations and export it to Zotero\n\n\n\nRonny A. Hernandez Mora, Erick Calderon Morales\n\n\nSep 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Neovim for R Users\n\n\n\nNeovim\n\n\nLinux\n\n\n\nAre you an R User who wants to try nvim?\n\n\n\nRonny A. Hernandez Mora\n\n\nSep 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a website using mkdocs, Rmarkdown and GitHub pages\n\n\n\nMkDocs\n\n\nLinux\n\n\n\nA posible solution for note takers (and those who need to organize your documentation) with mkdocs and Rmarkdown.\n\n\n\nRonny A. Hernandez Mora\n\n\nJan 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsando tmux: apuntes breves de mi jornada\n\n\n\ntmux\n\n\nLinux\n\n\n\nBreves notas sobre el uso de tmux. Adecuado para mirar de manera rápida alguna instrucción que necesitemos para continuar con nuestro flujo de trabajo.\n\n\n\nRonny A. Hernandez Mora\n\n\nJan 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesplegando mi app de shiny con shiny-server\n\n\n\nShiny\n\n\nLinux\n\n\n\nVamos a “llevar a internet” nuestra aplicación y hacerla accesible al mundo.\n\n\n\nRonny A. Hernandez Mora\n\n\nDec 28, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTiempo en R\n\n\n\nBase R\n\n\n\nTrabajar con fechas y tiempo en R es un poco complicado. En este post trato de explicar cómo trabajar con este tipo de datos y base R\n\n\n\nRonny A. Hernandez Mora\n\n\nMar 14, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro a datos y estructuras en R\n\n\n\nBase R\n\n\n\nUna breve intro a estructuras en R.\n\n\n\nRonny A. Hernandez Mora\n\n\nFeb 1, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDatos abiertos municipalidad de San José, Costa Rica\n\n\nUna introducción al uso del API de datos abiertos de la muni de San José\n\n\n\nRonny A. Hernandez Mora, Erick Calderon Morales\n\n\nJan 13, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOtra introducción a git\n\n\n\ngit\n\n\n\nUna introducción al control de versiones con git (otra más).\n\n\n\nRonny A. Hernandez Mora\n\n\nApr 20, 2016\n\n\n\n\n\n\n\n\nNo matching items"
  }
]