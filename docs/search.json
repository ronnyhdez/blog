[
  {
    "objectID": "posts/2021-12-11-usando-tmux/index.html",
    "href": "posts/2021-12-11-usando-tmux/index.html",
    "title": "Usando tmux: apuntes breves de mi jornada",
    "section": "",
    "text": "Es un sistema de multiplexación para sistemas Unix. Lo que nos permite es realizar múltiples tareas en una terminal a través del uso de paneles, sesiones o ventanas.\nEn otras palabras, es abrir una terminal y poder abrir y usar otras terminales dentro de esta.\n\n\nPara instalarlo en distribuciones basadas en debian, podemos hacerlo con el comando:\n\nsudo apt install tmux\n\nPara validar que se instaló\n\n# Si nos da un número de version, estamos listos.\ntmux -V\n\n\n\n\nPara iniciar la sesión con tmux, corremos en la terminal el comando con el mismo nombre:\n\ntmux\n\nVeremos en la parte inferior de la terminal que tenemos información como\n\n[0] 0:bash*    \"ronny\" 22:35 03-ene-21\n\nCon esto podemos asegurar que estamos usando tmux sin problema.\nPara hacer uso de las funciones que trae tmux, necesitamos tener en cuenta que hay un prefijo configurado por defecto que hay que utilizar para la mayoría de las operaciones: ctrl + b\nEsto se puede configurar para no dejarlo en una combinación de teclas tan incómoda, pero lo haremos luego.\n\n\n\n\nEn la terminal podemos dividir la vista en varios paneles.\nSe pueden dividir paneles en otros más.\nCada panel puede ejecutar distintas tareas.\n\nDividir paneles horizontal\n\nctrl + b + \"\n\nDividir paneles vertical\n\nctrl + b + %\n\nCerrar un panel\n\n# Primera opción\nctrl + b + x\n\n# Segunda opción:\nexit\n\nMoverse entre paneles\n\nctrl + b + ← ↑ → ↓ \n\nZoom en un panel\n\nSobre el panel que queremos enfocarnos usamos el comando.\nLos demás paneles no desaparecen, quedan ocultos por el panel en zoom.\nCon el mismo comando quitamos el enfoque en el panel\n\n\n# Para hacer el enfoque en un panel\nctrl + b + z\n\n# Para quitar el enfoque, en el panel escribimos el mismo comando\nctrl + b + z\n\n\n\n\n\nA diferencia de los paneles, las ventanas nos dan una pantalla completa.\nPodemos generar varias ventanas y en cada ventana crear paneles.\nEn parte inferior de la terminal, tendremos info sobre la o las ventanas.\n\nCrear ventana\n\n# c = create\nctrl + b + c\n\nMoverse a ventana anterior\n\n# p = previous\nctrl + b + p\n\nMoverse a ventana siguiente\n\n# n = next \nctrl + b + n\n\nMoverse a ventana por id numérico\n\nctrl + b + numero_ventana\n\nCerrar una ventana\n\nctrl + b + &\n\nRenombrar ventana\n\n# Para abrir opción de renombrar\nctrl + b + ,\n\n\n\n\n\nCada vez que usamos el comando tmux abrimos una sesión.\nSi se cierra la terminal, podemos regresar a la sesión.\nLas sesiones pueden correr como proceso “oculto”\n\nDesconectarse de una sesión\n\nctrl + b + d\n\nRevisar sesiones de tmux abierta con bash\n\nps aux | grep tmux\n\nRevisar sesiones tmux con funcionalidad propia\n\n# Comando completo\ntmux list-sessions\n\n# Comando corto\ntmux ls\n\nConectarnos a una sesión en específico\n\n# Por ejemplo a sesión 1\ntmux attach -t 1\n\nCambiar nombres a sesiones\n\n# Dentro de la sesión\nctrl + b + $\n\nCrear una nueva sesión con nombre\n\ntmux new -s \"mi_proyecto\"\n\n\n\n\nExisten hojas de referencias para tmux. Una es esta"
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html",
    "title": "Otra introducción a git",
    "section": "",
    "text": "Si les ha sucecido que luego de trabajar en un documento, tienen una carpeta llena con nombres como: “version_final”, “version_final_final”, “version_final_corregida”, “version_final_revisada” pues git les será útil para tener un control sobre los cambios que se introducen en el documento.\nEn este tutorial haremos ejemplos con scripts de código en R y cómo los cambios que vayamos trabajando, los podemos registrar, usar, guardar y documentar con mayor eficiencia tanto para trabajar individualemente como grupalmente."
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#esquema-de-git",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#esquema-de-git",
    "title": "Otra introducción a git",
    "section": "Esquema de git",
    "text": "Esquema de git\nAqui pretendo aclarar rapidamente que vamos a hacer con git, tener el bosquejo antes de entrar en detalles. Vamos a tener un repositorio remoto o en inglés upstream que será nuestro repositorio en github/gitlab/bitbucket. De este repositorio tendremos uno local que crearemos al hacer el clon. Siempre vamos a trabajar en repositorio local (en nuestra computadora) y esos cambios los vamos a subir al remoto con un push. De igual manera cambios que existan en el repositorio remoto (porque alguien hizo una contribucion, trabajamos desde otra computadora ys ubimos los cambios) lo vamos a hacer con un pull.\nVamos a tener una rama principal llamada master. El consejo aca es tener código limpio y funcional. Todo lo que sea trabajo en desarrollo, experimentos, pruebas o tareas específicas, vamos a hacerlo en ramas. Las ramas van a tener el nombre que nosotros decidamos. Los cambios que se encuentran en estas ramas, una vez que se encuentran finalizados, revisados y funcionales los podremos integrar a nuestra rama master en un proceso conocido como merge\nCada vez que hagamos cambios en el código, vamos a hacer un commit. Esto lo podemos interpretar como marcar un punto en la historia del proyecto. Git nos mostrará información sobre cada uno de nuestros commits tal como la fecha, hora, usuario, archivos cambiados y las líneas de los archivos que se cambiaron. La idea de los commits es que siempre podamos retornar a un punto específico en la historia del proyecto.\nEn el caso de trabajar con el repositorio de alguien más, lo podemos realizar a través de un proceso que se conoce como fork, que no es más que una bifurcación del repositorio de esa persona. Al realizar un “fork” del repositorio de otra persona estamos creando una copia de dicho repositorio bajo nuestro usuario. Ahora bien, la manera de ofrecer los cambios que hemos trabajado a la persona dueña del repositorio tiene un proceso algo diferente que veremos en otro tutorial."
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#iniciar-con-git",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#iniciar-con-git",
    "title": "Otra introducción a git",
    "section": "Iniciar con git",
    "text": "Iniciar con git\nEn este segmento vamos a seguir los pasos para tener un repositorio que tenga su cuenta remota con github/gitlab/bitbucket y local a través de nuestra terminal.\n\n1. Crear repositorio en github/gitlab/bitbucket\nSi tenemos cuenta en github/gitlab/bitbucket podemos crear un repositorio. Le llamamos repositorio al sitio donde vamos a guardar nuestros archivos. Un repositorio lo podemos visualizar como una carpeta que contendrá nuestro trabajo.\nCuando se crea un nuevo repositorio lo recomendable es iniciarlo con un arhivo que se llama .gitignore y con un readme. Para hacerlo en github (y algo similar en otras plataformas) es que seleccionemos las opciones de iniciar repositorio con un archivo .gitignore y un readme. El archivo gitignore debe de ser específico para la herramienta que vayamos a usar, en este caso sería R\nLa funcionalidad del .gitignore es que este archivo (es como un archvio de texto) contiene especificaciones sobre los formatos de los archivos que no queremos que se integren en nuestro sistema de control de versiones. Generalmente no deseamos que archivos como imagenes (.png .jpeg) o bien archivos de datos muy grandes (.txt .csv .feather) sean compartidos entre repositorios remotos, locales o personas con las que colaboremos. Un ejemplo de un archivo .gitignore es el siguiente:\nSi no identifican algunos de los elementos de ahí no hay de qué preocuparse, mejor nos enfocámos en los tipos de archivos que nosotros necesitamos que NO sean tomados en cuenta por git, es decir, que no queremos que se suban a nuestro repositorio de github por ejemplo ni en la gestión de versiones. Si es el caso que tenemos que hacer el knit de un Rmarkdown y necesitamos un archivo .csv para renderizarlo, pero solamente queremos el archivo Rmakrdown en el sistema de git, pues en nuestro archivo .gitignore escribimos .csv, guardamos el archivo y listo.\nEn el caso del readme es un archivo que debe de dar una idea de qué tenemos en el repositorio. Es una guía para nosotros mismos u otros usuarios que vayan a hacer uso del repositorio y nuestro código. En github los readme se ven así:\nUna vez que el repositorio haya sido creado, vamos a encontrarnos con una opción que dirá “clone or download”. Vamos a hacer click en clone y la dirección que allí sale la tenemos que copiar (ctrl + c). La imagen muestra lo que sucede al hacer clone en el botón verde que ofrece github:\nYa con la información de la dirección del repositorio copiada, vamos a llevarla a nuestra terminal:\n\n\n2. Clonar repositorio en nuestra computadora\nUna vez que tenemos creado el repositorio y la dirección copiada, vamos a abrir nuestra terminal. Si es usuario de windows puede usar el powershell. Lo primero que vamos a ver es una dirección y allí tendremos que dirigirnos a la carpeta donde deseamos colocar el repositorio.\n\ncd ~ #Esto me va a llevar al home\n\n\ncd Desktop/ #Me lleva al escritorio\n\n\nls #Me da lista de los elementos que existen en la dirección que estoy\n\n\ncd primeras_letras_nombre <TAB> #Con TAB autocompleta el nombre\n\n\nEste procedimiento lo vamos realizando hasta llegar a la carpeta en la cual queremos clonar el repositorio.\n\nEl segundo paso es clonar el repositorio:\n\ngit clone <dirección del repositorio que copiamos>\n\nPor último nos dirigimos a la carpeta del repositorio\n\ncd <nombre_repositorio>\n\n¡Listo! Ya tenemos el repositorio remoto tal cual en nuestra computadora local. A partir de aquí podemos trabajar en nuestros archivos.\n\n\n3. Crear una rama en el repositorio\n¿Qué pasa si queremos hacer una variación en el código sin miedo a dañar lo que ya tenemos? Pues bien, git nos permite hacer ramas que son una bifurcación del trabajo que llevamos realizado hasta ese momento y que si luego queremos, podemos volver a integrar a la rama principal.\nCuano tenemos un repositorio la rama principal está nombrada como master. A partir de esta rama master podemos hacer ramas con los nombres que nosotros queramos. La idea de las ramas es trabajar de manera ordenada, en donde en mi rama master siempre debemos de tener código limpio y funcional y lo que sean nuevas tareas, mejoras o experimentos lo hagamos en ramas que se bifurcan a partir de la rama master.\nCuando el trabajo realizado en la rama sea funcional y limpio, lo podemos integrar a la rama master. Caso contrario podemos olvidarnos de la rama y volver a nuestra rama master.\nCrear rama\n\ngit checkout -b <NOMBRE_RAMA> #Nos crea y dirige a la nueva rama\n\nVerificar rama en la que estamos\n\ngit status\n\ncambiar entre ramas\nPara cambiar entre ramas que ya existen NO hay que usar “-b”\n\ngit checkout <NOMBRE_RAMA>\n\n\n\n4. Subir/bajar cambios\nComo estamos trabajando con un repositorio remoto y uno local, vamos a querer sincronizar los cambios. Estos cambios pasarán a estar en la historia del proyecto como commits. Un commit es un punto en la historia del proyecto que muestra el trabajo realizado en ese momento. En el flujo del trabajo que uno tenga es recomendable hacer commits regularmente y hacer el push de manera regular para asegurarnos de no perder el trabajo.\n4.1 Revisar estado de los cambios  Cuando tengamos cambios en nuestros archivos, podemos revisar cuáles han cambiado y si los tenemos incluidos o no en nuestro registro de cambios\n\ngit status\n\n4.2 Agregar cambios Los archivos que queramos agregar a la historia del proyecto lo podemos hacer de dos maneras, una donde indicamos explícitamente el archivo específico:\n\ngit add <NOMBRE_ARCHIVO>\n\nO de tal manera en que agreguemos todos los archivos con cambios de una vez\n\ngit add .\n\n4.3 Someter cambios a la historia de git\n\ngit commit -m \"MENSAJE_CORTO\"\n\nEl mensaje sirve para darnos a nosotros mismos o a colaboradores, una idea del cambio que se trabajó.\n4.4 Subir cambios al repositorio remoto\n\ngit push\n\n4.5 Bajar cambios del repositorio remoto Si estamos trabajando con colaboradores y han integrado cambios en el repositorio remoto que nosotros no tenemos en nuestro repositorio local, los podemos traer de la siguiente manera:\n\ngit pull"
  },
  {
    "objectID": "posts/2021-12-11-otra-intro-a-git/index.html#qué-tenemos-hasta-acá",
    "href": "posts/2021-12-11-otra-intro-a-git/index.html#qué-tenemos-hasta-acá",
    "title": "Otra introducción a git",
    "section": "¿Qué tenemos hasta acá?",
    "text": "¿Qué tenemos hasta acá?\nUna idea básica sobre git, de sus componentes, del flujo de trabajo y de los principales comandos que se usan. Un tutorial con un ejemplo básico vendrá despueś.\n\nReferencias\nhttps://git-scm.com/book/en/v2 https://git-scm.com/book/es/v1/Ramificaciones-en-Git-Procedimientos-b%C3%A1sicos-para-ramificar-y-fusionar"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html",
    "href": "posts/2021-12-11-estructuras-r/index.html",
    "title": "Intro a datos y estructuras en R",
    "section": "",
    "text": "# ---\n# title: \"Intro a datos y estructuras en R\"\n# description: |\n#   Una breve intro a estructuras en R.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n# date: 2018-02-01\n# creative_commons: CC BY-NC\n# preview: images/structure.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#primer-paso",
    "href": "posts/2021-12-11-estructuras-r/index.html#primer-paso",
    "title": "Intro a datos y estructuras en R",
    "section": "Primer paso:",
    "text": "Primer paso:\nPrimero tenemos que entender que R lee los datos que le damos de distintas maneras para poder manejarlos y hacer tareas que le pidamos. Entre estos tenemos:\n\ncharacter: corresponden a texto\nnumeric: corresponden a números\ninteger: son números enteros (sin decimales)\nlogical: son condicionales y están en forma de verdadero o falso\ncomplex: corresponden a números complejos\n\nPara crear vectores c( )\n\na <- c(\"biologia\", \"A\", \"estadistica\")\nclass(a)\n\n[1] \"character\"\n\n\n\nb <- c(18.6, 90)\nclass(b)\n\n[1] \"numeric\"\n\n\n\nc <- c(18L, 26L)\nclass(c)\n\n[1] \"integer\"\n\n\n\nd <- 2 + 4i\nclass(d)\n\n[1] \"complex\"\n\n\n\ne <- c(TRUE, FALSE)\nclass(e)\n\n[1] \"logical\""
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#vectores-elementos-son-del-mismo-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#vectores-elementos-son-del-mismo-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "Vectores elementos son del mismo tipo",
    "text": "Vectores elementos son del mismo tipo\n\nv_1 <- c(10,20,30)\nv_2 <- c(\"a\",\"b\",\"c\")\nv_3 <- c(TRUE,FALSE,TRUE)"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#listas-elementos-son-de-diferente-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#listas-elementos-son-de-diferente-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "Listas elementos son de diferente tipo",
    "text": "Listas elementos son de diferente tipo\n\nl_1 <- list(v_1,v_2,v_3)\n\nl_1\n\n[[1]]\n[1] 10 20 30\n\n[[2]]\n[1] \"a\" \"b\" \"c\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#matrix-es-de-dos-dimensiones-con-elementos-del-mismo-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#matrix-es-de-dos-dimensiones-con-elementos-del-mismo-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "matrix es de dos dimensiones con elementos del mismo tipo:",
    "text": "matrix es de dos dimensiones con elementos del mismo tipo:\n\nmatrix_1 <- matrix(1:9,nrow = 3, ncol = 3)\nmatrix_1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#data-frame-es-de-dos-dimensiones-con-elementos-de-diferente-tipo",
    "href": "posts/2021-12-11-estructuras-r/index.html#data-frame-es-de-dos-dimensiones-con-elementos-de-diferente-tipo",
    "title": "Intro a datos y estructuras en R",
    "section": "data frame es de dos dimensiones con elementos de diferente tipo:",
    "text": "data frame es de dos dimensiones con elementos de diferente tipo:\n\n# Primero creamos un par de vectores para unirlos en un dataframe\nnumero <- 1:5\nnombre <- c(\"Mercurio\",\"Venus\",\"Tierra\",\"Marte\",\"Jupiter\")\nplaneta <- data.frame(numero,nombre)\nplaneta\n\n  numero   nombre\n1      1 Mercurio\n2      2    Venus\n3      3   Tierra\n4      4    Marte\n5      5  Jupiter"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#array-es-una-estructura-de-tres-o-más-dimensiones",
    "href": "posts/2021-12-11-estructuras-r/index.html#array-es-una-estructura-de-tres-o-más-dimensiones",
    "title": "Intro a datos y estructuras en R",
    "section": "Array es una estructura de tres o más dimensiones:",
    "text": "Array es una estructura de tres o más dimensiones:\n\nD <- 1:12\ndim(D) <- c(2,3,2)        # Dos filas, tres columnas y dos \"caras\"\nD\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12"
  },
  {
    "objectID": "posts/2021-12-11-estructuras-r/index.html#qué-siginifica-dir-y-ls",
    "href": "posts/2021-12-11-estructuras-r/index.html#qué-siginifica-dir-y-ls",
    "title": "Intro a datos y estructuras en R",
    "section": "¿Qué siginifica dir() y ls()?",
    "text": "¿Qué siginifica dir() y ls()?\ndir () me refiere a los archivos que se encuentran en el directorio de trabajo. ls () me refiere a los objetos que se encuentran en el espacio de trabajo"
  },
  {
    "objectID": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html",
    "href": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html",
    "title": "Datos abiertos municipalidad de San José, Costa Rica",
    "section": "",
    "text": "# ---\n# title: \"Datos abiertos municipalidad de San José, Costa Rica\"\n# description: |\n#   Una introducción al uso del API de datos abiertos de la muni de San José\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n#   - name: Erick Calderón Morales\n#     url: https://github.com/ecamo19\n# date: 2018-01-13 \n# creative_commons: CC BY-NC\n# preview: images/city.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---\nGracias a la iniciativa de Gobierno Abierto de Costa Rica tenemos la posibilidad de obtener datos de diferentes entes a través de la conexión con API’s.\nEsto nos da la posibilidad de no pasar por engorrosos procesos de limpiar datos a partir de formatos casi imposibles como pdf’s, .csv extravagantes u otros formatos difíciles de trabajar.\nEn este caso vamos a utilizar el lenguaje de programación R y el paquete junr de Frans van Dunné para conectarnos al API de la municipalidad de San José y revisar qué datos se encuentran disponibles."
  },
  {
    "objectID": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#referencias",
    "href": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#referencias",
    "title": "Datos abiertos municipalidad de San José, Costa Rica",
    "section": "Referencias",
    "text": "Referencias\n\nvignette del paquete junr\nPágina desarrolladores Municipalidad de San José\nGobierno abierto Costa Rica"
  },
  {
    "objectID": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#querés-revisar-más-información",
    "href": "posts/2021-12-11-datos-abiertos-muni-sanjose/index.html#querés-revisar-más-información",
    "title": "Datos abiertos municipalidad de San José, Costa Rica",
    "section": "¿Querés revisar más información?",
    "text": "¿Querés revisar más información?\nMi compañero Erick Calderón y yo estamos trabajando en un proyecto donde pretendemos crear más tutoriales sobre uso de datos abiertos del gobierno de Costa Rica a través de API’s y el lenguaje de programación R. Si querés contribuir, tenés preguntas o una idea podés revisar nuestro proyecto en Github"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html",
    "href": "posts/2021-12-11-tiempo-en-r/index.html",
    "title": "Tiempo en R",
    "section": "",
    "text": "La medición del tiempo es algo que puede ser particular, ya que hay meses con diferente número de días, en distintos países la manera de colocar el dato del día o del mes se cambia, en años bisiestos febrero tiene un día extra entre otros factores, hay diferentes\nPor ende, hacer cálculos con fechas puede resultar algo complicado, sin embargo R tiene un sistema robusto para poder lidiar con estas situaciones."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#tipo-y-clase-del-tiempo-en-r",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#tipo-y-clase-del-tiempo-en-r",
    "title": "Tiempo en R",
    "section": "Tipo y Clase del tiempo en R:",
    "text": "Tipo y Clase del tiempo en R:\nPara revisar su tipo de dato y su clase vamos a guardar esta fecha y hora de nuestro ordenador en un objeto de la siguiente manera:\n\nfecha_hora <- Sys.time() # Guardar en un objeto\n\ntypeof(fecha_hora) # Tipo de dato\n\n[1] \"double\"\n\nclass(fecha_hora) # Clase del objeto\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nAl momento de utilizar la funciónSys.time(), nos devuelve una respuesta que a primera instancia nos parecería un objeto de tipo character por sus comillas alrededor de esto, sin embargo, al revisar podemos notar que es un objeto de tipo double y su clase es _ “POSIXct” “POSIXt” _ (tiene dos clases)"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#qué-signifan-esas-dos-clases",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#qué-signifan-esas-dos-clases",
    "title": "Tiempo en R",
    "section": "¿Qué signifan esas dos clases?",
    "text": "¿Qué signifan esas dos clases?\nComo mencionamos anteriormente, por convención en R se utiliza una representación numérica, basada en segundos. Esto quiere decir que cada fecha se representa por el número de segundos que han transcurrido desde las 12:00 A.M. del 1 Enero de 1970.  (UTC: Coordinated Universal Time)\nEsto es bastante útil si queremos generar gráficos de series de tiempo, pero qué sucede si queremos representar las medias por mes, o por día. En este caso es necesario contar con dos maneras de representar las fechas:\nPOSIXct el sufijo ct se refiere a continuos time y este formato es representado de manera númerica por segundos. Este es un vector que se puede usar como una variable continua en modelos de regresión.\nPOSIXlt el sufijo lt corresponde a list time y lo que hace es una lista de todas las descripciones categóricas del tiempo. Es muy útil como variable explicativa categórica.\n\n¿Cómo funcionan el sistema POSIX?\nPara revisar de qué manera R hace esto podemos hacer uso de la función unclass()\n\nunclass(fecha_hora)\n\n[1] 1663098567\n\n\nEl resultado que obtenemos es un elemento que R utiliza para construir un vector doble. Lo que tenemos allí es que desde las 12:00 A.M. del 1 de Enero de 1970 han transcurrido 1 514 244 708 hasta el día en que este tutorial se ha creado y este es el formato POSIXct\nEn el caso de caso de una lista como POSIXlt vamos a revisar los componentes del mismo objeto con el que hemos venido trabajando:\n\nfecha_hora <- as.POSIXlt(fecha_hora) # Definimos formato\nunlist(fecha_hora) # Sacamos de la lista los objetos almacenados\n\n               sec                min               hour               mday \n\"26.8818531036377\"               \"49\"               \"13\"               \"13\" \n               mon               year               wday               yday \n               \"8\"              \"122\"                \"2\"              \"255\" \n             isdst               zone             gmtoff \n               \"1\"              \"MDT\"           \"-21600\" \n\n\n¿Qué es lo que tenemos? Se nos muestran los componentes de la lista, que está representada por el número de segundos, minutos, hora (en formato de 24 horas). Luego viene mday que es el día del mes (inicia en 1), mon es el mes del año (comienza en enero = 0), year que representa el año (inicia en 0 = 1900),wday el día de la semana (inicia domingo = 0), yday es el número de día del año (1 de enero = 0). Por último la variable isdst lo que hace es indicarnos si un horario de verano está siendo considerado (0 = FALSE, como en este caso)"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#diferencias-entre-fechas-en-un-vector",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#diferencias-entre-fechas-en-un-vector",
    "title": "Tiempo en R",
    "section": "Diferencias entre fechas en un vector",
    "text": "Diferencias entre fechas en un vector\n\n# Primero hacemos un objeto a clase difftime:\nas.difftime(otras_fechas, \"%d%b%Y\")\n\nTime differences in days\n[1]  -2415 -11775  -9807"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#cálculos-con-dos-objetos",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#cálculos-con-dos-objetos",
    "title": "Tiempo en R",
    "section": "Cálculos con dos objetos:",
    "text": "Cálculos con dos objetos:\nHay cálculos que se pueden generar con fechas y horas, ya sea sumando a una fecha o a una hora un número (que representará segundos), también entre fechas/horas e inclusive la utilización de operadores lógicos.\n\n# vamos a generar dos fechas:\n\nfecha_1 <- as.POSIXlt(\"2018-01-01\")\nfecha_2 <- as.POSIXlt(\"2017-01-02\")\n\n\nY podemos sumar una fecha con un número:\n\n\nfecha_1 + 100000\n\n[1] \"2018-01-02 03:46:40 MST\"\n\n\nEsto nos suma cien mil segundos, lo cual agrega 3 horas, 46 minutos y 40 segundos a la fecha que habíamos creado.\n\nPodemos resta esa misma cantidad de segundos:\n\n\nfecha_1 - 100000\n\n[1] \"2017-12-30 20:13:20 MST\"\n\n\nVemos que nos devuelve al 30 de diciembre del 2017 a las 20 con 13 minutos y 20 segundos.\n\nRestarle a la fecha 1 la fecha 2:\n\n\nfecha_1 - fecha_2\n\nTime difference of 364 days\n\n\nNos dice que entre las fechas hay 364 días.\n\nHacer una operación lógica:\n\n\nfecha_1 <= fecha_2\n\n[1] FALSE\n\n\nSi decimos que fecha_1 es menor o igual que fecha_2 R nos dice que eso es falso."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-días",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-días",
    "title": "Tiempo en R",
    "section": "Diferencia de días:",
    "text": "Diferencia de días:\nSi tenemos una pregunta como: ¿Cuántos días han transcurrido desde el 1 de diciembre del 2017 al 2 de enero del 2018?\n\ndifftime(\"2018-01-02\",\"2017-12-01\")\n\nTime difference of 32 days\n\n\nLa respuesta es que han transcurrido 32 días."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-horas",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#diferencia-de-horas",
    "title": "Tiempo en R",
    "section": "Diferencia de horas:",
    "text": "Diferencia de horas:\nEn este caso, si tenemos horas en lugar de fechas, podemos hacer uso de la función as.difftime()\n\ntiempo_1 <- as.difftime(\"12:00:00\")\ntiempo_2 <- as.difftime(\"17:20:00\")\ntiempo_2 - tiempo_1\n\nTime difference of 5.333333 hours\n\n\nNos dice cuál es la diferencia en horas. (Si te preguntas porqué 5.33 en lugar de 5 horas y 20 minutos, recuerde que la respuesta está dada en horas y 20 minutos corresponden a 0.333 horas)"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-día",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-día",
    "title": "Tiempo en R",
    "section": "Secuencia en aumento por día:",
    "text": "Secuencia en aumento por día:\n\nseq(as.POSIXlt(\"2018-01-01\"), as.POSIXlt(\"2018-01-10\"), \"1 day\")\n\n [1] \"2018-01-01 MST\" \"2018-01-02 MST\" \"2018-01-03 MST\" \"2018-01-04 MST\"\n [5] \"2018-01-05 MST\" \"2018-01-06 MST\" \"2018-01-07 MST\" \"2018-01-08 MST\"\n [9] \"2018-01-09 MST\" \"2018-01-10 MST\"\n\n\n¿Qué hicimos? La función seq() nos genera un vector con una serie de valores de una secuencia, en este caso le indicamos dos elementos de tipo POSIXlt que corresponden a fechas y un último argumento que indica 1 día. Es decir, que del 1ero de enero del 2018 al 10 de enero del 2018 queremos una secuencia entre esas fechas que aumente de 1 día en 1 día."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-semanas",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-semanas",
    "title": "Tiempo en R",
    "section": "Secuencia en aumento por semanas:",
    "text": "Secuencia en aumento por semanas:\n\nseq(as.POSIXlt(\"2018-01-01\"), as.POSIXlt(\"2018-02-01\"), \"1 weeks\")\n\n[1] \"2018-01-01 MST\" \"2018-01-08 MST\" \"2018-01-15 MST\" \"2018-01-22 MST\"\n[5] \"2018-01-29 MST\"\n\n\n¿Qué hicimos? Nuevamente indicamos un par de fechas que delimitan el inicio y el final de la secuencia y por último le decimos que la secuencia aumente de semana en semana.\nEsto lo podemos hacer de igual manera si queremos que la secuencia aumente por meses months o por años year"
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-tiempo-en-segundos",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-en-aumento-por-tiempo-en-segundos",
    "title": "Tiempo en R",
    "section": "Secuencia en aumento por tiempo en segundos:",
    "text": "Secuencia en aumento por tiempo en segundos:\n\nseq(as.POSIXlt(\"2018-01-01\"),as.POSIXlt(\"2018-01-02\"),8000)\n\n [1] \"2018-01-01 00:00:00 MST\" \"2018-01-01 02:13:20 MST\"\n [3] \"2018-01-01 04:26:40 MST\" \"2018-01-01 06:40:00 MST\"\n [5] \"2018-01-01 08:53:20 MST\" \"2018-01-01 11:06:40 MST\"\n [7] \"2018-01-01 13:20:00 MST\" \"2018-01-01 15:33:20 MST\"\n [9] \"2018-01-01 17:46:40 MST\" \"2018-01-01 20:00:00 MST\"\n[11] \"2018-01-01 22:13:20 MST\"\n\n\nEn este caso 8000 segundos nos genera un aumento de 2 horas, 13 minutos y 20 segundos en cada elemento de la secuencia."
  },
  {
    "objectID": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-sin-especificación-de-final",
    "href": "posts/2021-12-11-tiempo-en-r/index.html#secuencia-sin-especificación-de-final",
    "title": "Tiempo en R",
    "section": "Secuencia sin especificación de final:",
    "text": "Secuencia sin especificación de final:\n\nseq(as.POSIXlt(\"2018-01-01\"), by = \"weeks\", length = 7)\n\n[1] \"2018-01-01 MST\" \"2018-01-08 MST\" \"2018-01-15 MST\" \"2018-01-22 MST\"\n[5] \"2018-01-29 MST\" \"2018-02-05 MST\" \"2018-02-12 MST\"\n\n\n¿Qué hicimos? Generamos nuevamente una secuencia en donde sólo le indicamos la fecha en la que debe de iniciar, seguido del argumento semanas y por último la cantidad de objetos que debería de crear. Es decir, el final está generado por la cantidad (length) de elementos que queremos en esa secuencia."
  },
  {
    "objectID": "posts/2022-09-11-using-nvim-for-r-users/index.html",
    "href": "posts/2022-09-11-using-nvim-for-r-users/index.html",
    "title": "Using Neovim for R Users",
    "section": "",
    "text": "There is a ton of tutorials in the internet about this, but after trying several times, the steps that worked for me are the following:\n\nsudo apt install neovim -y\n\nThen you can validate the version with:\n\nnvim --version\n\nNow that we have nvim installed in our computer, it’s time to configure it. First you need to create the config file that would be in the path ~/.config/nvim/\n\n# Create directory\nmkdir ~/.config/nvim/\ncd ~/.config/nvim/\n\n# Create nvim config file\nnvim init.vim\n\nFrom there, you will see an empty file. We are going to add some configuration. There are many options to adapt nvim to your needs and lots of examples out there. Here I’m going to use a basic configuration so you can get an idea on what you can do.\nTo understand the file, take notes on this:\n\nEvery \" means that the line is a comment\nAll other lines without the \" are instructions to set your configuration\nPlug means that you want to use a Plugin. You will need a plugin to manage these. (More on this later)\n\nThis is what a basic config file would look like:\n\n\" Cursor as a block\nset guicursor=\n\n\" Use relative numbers in files\nset relativenumber\n\n\" Line where I'm positioned is the real line number\nset nu\n\n\" No saving or keeping buffer in the background\nset hidden\n\n\" Indentetation configuration\nset tabstop=4 softtabstop=4\nset shiftwidth=4\nset expandtab\nset smartindent\n\n\" Start scrolling until 8 spaces away\nset scrolloff=8\n\n\" Create extra column\nset signcolumn=yes\n\n\" Mark 80 characters line\nset colorcolumn=80\n\n\" Set encoding\nset encoding=utf-8\n\n\" Plugins\ncall plug#begin()\nPlug 'jalvesaq/Nvim-R'\nPlug 'preservim/nerdtree'\nPlug 'tpope/vim-fugitive'\nPlug 'ncm2/ncm2'\nPlug 'gaalcaras/ncm-R'\ncall plug#end()\n\nA good idea for me is that, when I add a new line of configuration, I will add a comment stating what that command is mean for. That way, it will be easy for me to remember what I was trying to achieve when I made the change.\n\n\nIn the init.vim file above, I included already some of the plugins that I want to use when working with nvim. When using the plugins, these should be in the middle of this call:\n\ncall plug#begin('~/.vim/plugged')\n\ncall plug#end()\n\nNow, you can see that they are included in the init.vim file, but still are not installed. For this, the first step is to find out a plugin manager.\nThe one that I like is vim-plug. To install it, you will need to:\n\nsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n\nAfter the vim-plug is installed, you will need to go back to your init.vim document. Then install the rest of plugins with:\n\n:PlugInstall\n\nWhen installing the rest of the plugins, you will see something similar to:\n\n\n\n\n\nIf I want to know which pluggins are installed, with the following vim-plug command we can check them:\n\n:PlugStatus"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "",
    "text": "# ---\n# title: \"Creating a website using mkdocs, Rmarkdown and GitHub pages\"\n# description: |\n#   A posible solution for note takers (and those who need to organize your documentation) with mkdocs and Rmarkdown.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/ \n# date: 2022-01-13\n# creative_commons: CC BY-NC\n# preview: images/site_alive.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#what-are-we-going-to-create",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#what-are-we-going-to-create",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "What are we going to create?",
    "text": "What are we going to create?\nA static web page like this one to manage your documentation created in Rmarkdown"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#the-problem",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#the-problem",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "The problem:",
    "text": "The problem:\nPretty often I found myself in situation where I say: “I did this sometime ago and now I don’t remember quite well which were the steps to do it again”.\nFrom my job and also current projects I’m always taking raw notes in a text file file and despite the tons of apps out there, I like text files because they are pretty simple and this allows me to just focus in writing down the idea, concept or steps of what I’m doing and implement markdown.\nBut, the problem with this approach is that at the end of the day, I have my desktop or other folders with a lot of individual .md or txt files laying around without any intuitive context. This got me in troubles and in loosing time when I wanted to get back to something that I did and that I had somewhere in my computer.\nIf at this point your are asking yourself: why you didn’t use a wiki? or a vignette? or an Rmarkdwon file? or something more organized? The answer is simple: In the middle of a project execution, when I doubt about something, I would go to google or a reference book, grab what I needed and take a quick note about the steps that I followed to accomplish my task. If it didn’t work I would throw away the file, if it worked, I would keep the file.\nThen, I found out about MkDocs (actually Frans was who showed me this) and it was the perfect solution: a simple web page, an index and most important: a search toolbar that can search in all the web page content (I mean, all my notes in there)!\n\nAs they state in their site:\n\nMkDocs is a fast, simple and downright gorgeous static site generator that’s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\n\nNow, they state that source files are written in Markdown, but if I’m an R user, probably I’m used to Rmarkdown files. Plus it’s nice to create documents in Rmarkdown where I can mix markdown and R code (R + markdown)."
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#so-how-can-i-set-up-everything",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#so-how-can-i-set-up-everything",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "So, how can I set up everything?",
    "text": "So, how can I set up everything?\nFor this recipe, you will need:\n\nR and RStudio\nRmarkdown package\nMkDocs\ngit\nGitHub account\n\nI’m not going to describe how to install R RStudio, Rmarkdown or git. There are plenty good tutorials and documentation on how to do it out there. I’m going to describe the process from the installation of MkDocs.\n\nGetting MkDocs\nFor this, I followed the instructions over here. I got already python on my machine and I’m a Linux user, so I’m using Ubuntu 20.04\nGiven that I had already python I just installed MkDocs:\n\npip install mkdocs\n\nThen I validated that the installation was succesful:\n\n$ mkdocs --version\nmkdocs, version 1.2.2 from /home/your_username/.local/lib/python3.8/site-packages/mkdocs (Python 3.8)\n\nDone! I got MkDocs on my computer.\n\n\nGetting Matherial theme\nI don’t like the default theme that comes with MkDocs, so I changed to Matherial.\nTo install this theme, you will need to run in the terminal:\n\n$ pip3 install mkdocs-material\n\n\n\nConfiguring your GitHub repository\nYou will need to have an account already on GitHub. When you are done with this step, you can go and create a repository. Also you will need to go to settings, search for Pages on the left hand side menu and there select the main branch to enable GitHub Pages for your repository.\nThe steps are the following:\nCreate a new repository\n\nOptions for the new repo\n\nSettings to enable GitHub pages"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#cloning-your-project",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#cloning-your-project",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Cloning your project",
    "text": "Cloning your project\nIf you are already familiar with this step, skip this section and go ahead to the next session. If you are starting with git and GitHub here is the set of steps to clone your repo and start working.\nUp to this point we just have created the repository on GitHub and tweak some settings. It’s time to clone the repository created on GitHub to our computer. We will be working with the RStudio IDE.\nCreate new project\n\nSelect the Version Control option \nThen select the Git option \nNow, go to your repository on GitHub and under the Code button copy the url. Make sure that the HTTPS option is highlighted. \nCopy the URL in the Repository URL section. The Project directory name should auto-populate. Then select your path where you want to locate your repository folder. \nNow, RStudio should open a new session for working on your repository!"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#working-on-your-notes",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#working-on-your-notes",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Working on your notes",
    "text": "Working on your notes\nNow we are all set. We can start creating our Rmarkdown documents:\n\nCreate as many Rmd documents as you need. Each document will be a “section” on your final website.\nEach of the titles and subtitles in your document will be sections inside the specific page.\nAlso, use relative paths. This will make everything less error prone.\nNow, because we are going to use the package docmaker we need to follow a structure:\n\nAll your Rmd files should be in the root of your project.\nYour data, images, pdfs files can be saved inside folders.\nDon’t use docs folder. This is a special folder designated to save the files needed to build the web page. docmaker package will be in charge of the use of this folder, so you don’t have to worry about it.\n\nYour files in your repository should look something like this:\n\n\n.gitignore advice\nIn order to not make your control version slow or run out of space in your GitHub account, ignore some files writing them in your .gitignore file.\nJust open that file in RStudio and add the following lines to not include images, data, credentials or other files that are not necessary for control versioning:\n\nIn there I added:\n# Personal files\ndata/\nimages/\n*.html\n.Renviron\n\n\nSending your changes to your github repository.\nFor this example I’m not using branches to avoid focusing on the git details, so we are just going to send everything to the main branch. This step is\n\ngit add .\ngit commit -m \"Add first notes\"\ngit push\n\nBe aware that this is probably going to ask you for who you are (user name on GitHub and email) and your credentials. One tip to save your credentials for the specific repository that you are working on is the following command after you enter your credentials:\n\ngit config credential.helper store"
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#deploy-and-publish-your-notes-with-docmaker",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#deploy-and-publish-your-notes-with-docmaker",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Deploy and publish your notes with docmaker",
    "text": "Deploy and publish your notes with docmaker\nSo far, we have our notes. But we are still lacking the part of publishing in our web page the notes. There are several steps to do this manually but after many times repeating everything I decided to create a small R package to automatize this steps. This package is called dockmaer\nYou can install the package with:\n\ndevtools::install_github(\"ronnyhdez/docmaker\")\n\nNow, on your console you can load the package:\n\nlibrary(docmaker)\n\n\nConfigure repo with docmaker\nBefore building and deploying our notes, we need to do some configuration steps in our repository. docmaker can take care of this with the function:\n\nbuild_repo(github_page_url = \"https://ronnyhdez.github.io/test_docmaker/\",\n           site_author = \"Ronny A. Hernández Mora\")\n\nWe can get the URL of our repository in the settings > page on GitHub. After we enabled this in a step before, there should appear the URL designated by GitHub for our web site.\n\nThe site_author should be our name.\nThis function will do the following:\n\nCreate a yml file\nAdd to the .gitignore the site folder\nCreate a docs folder\n\n\n\nBuild and deploy notes\nBecause this is our first time, all of our notes (three in the example) are not existing as md documents nor even built or deploy with mkdocs.\ndocmaker have a function to take all the .Rmd files existing in our project root and do all the steps needed to deploy this ones:\n\nmake_all_docs(deploy = TRUE)\n\nThis function will do the following:\n\nRender all our Rmd files to md\nMove the outputs (including images) to the docs folder\nIf we are using a README.Rmd file this will be ignore\nBuild the mkdocs\nIf deploy is set to TRUE it will deploy the notes.\nCreate an specifi branch for the pages deployment: gh-deploy\n\nNow, given that we are using a new branch to be deployed, we need to go back to GitHub pages and make a small change: change the branch selected to be build from:\n\nAfter some seconds (or a few minutes), we should be able to see our site alive!\n\nAs we can see, our 3 files are sections in the left side menu. The titles and subtitles of each document will be shown in the Table of contents in the right side menu."
  },
  {
    "objectID": "posts/2021-12-11-usingmkdocsrmd/index.html#code-and-example-site",
    "href": "posts/2021-12-11-usingmkdocsrmd/index.html#code-and-example-site",
    "title": "Creating a website using mkdocs, Rmarkdown and GitHub pages",
    "section": "Code and example site",
    "text": "Code and example site\nAll the code and configuration files of the example site are in this GitHub repository:\n\nRepository\nSite"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html",
    "href": "posts/2023-02-27-nvim-and-r/index.html",
    "title": "Using R with Neovim",
    "section": "",
    "text": "Why?\nInstallation and configuration - allacrity - plugins\nWorkflow - most used commands (that I have so far) - Integration with quarto\nUser case: take fast notes and deploy fast - This is with the packages that I have to use mkdocs - Altough if it gets too long, it would be another blogpost"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html#movements",
    "href": "posts/2023-02-27-nvim-and-r/index.html#movements",
    "title": "Using R with Neovim",
    "section": "Movements",
    "text": "Movements\nctrl + w + l Jump to left panel\nctrl + w + h Jump to right panel\ngg Move to of file\nG Move bottom of file\nfunction + Shift + up or down Take to the upper or lower page section"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html#r-specific-commands",
    "href": "posts/2023-02-27-nvim-and-r/index.html#r-specific-commands",
    "title": "Using R with Neovim",
    "section": "R specific commands",
    "text": "R specific commands\n\\rf Connect to R Console\n\\rq Quit R Console\n\\d Run current line and move to the next line\n\\l Run current line, but cursor will stay on the same line.\n\\pp Run paragraph. But cursor will stay on the same block.\n\\pd Runs block and move to the next one\n\\ss Execute a block of selected code. This has to be done with visual mode\n\\aa Run entire script\n\\ro Open the “Global Environment”\n\\r= Expand all\n\\r- Collapse all\n\\qp Render preview .qmd (If I save the doc, it will re-render the site)\n\\gn Next chunk\n\\gN Previous chunk\n\\ch Run all previous chunks to here\n\\cc Run current chunk"
  },
  {
    "objectID": "posts/2023-02-27-nvim-and-r/index.html#edit-files",
    "href": "posts/2023-02-27-nvim-and-r/index.html#edit-files",
    "title": "Using R with Neovim",
    "section": "Edit files",
    "text": "Edit files\n:%s/word_in_file/word_to_insert Substitute all matches\n:set spell will set the grammar check in the document\nz= will open the options to correct a word."
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html",
    "href": "posts/2021-12-11-desplegando-shiny/index.html",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "",
    "text": "# ---\n# title: \"Desplegando mi app de shiny con shiny-server\"\n# description: |\n#  Vamos a \"llevar a internet\" nuestra aplicación y hacerla accesible al mundo.\n# author:\n#   - name: Ronny A. Hernández Mora\n#     url: http://ronnyhdez.rbind.io/\n# date: 2020-12-28\n# creative_commons: CC BY-NC\n# preview: images/app.png\n# twitter:\n#   creator: \"@RonnyHdezM\"\n# output:\n#   distill::distill_article:\n#     self_contained: true\n# ---"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#requisitos",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#requisitos",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "Requisitos:",
    "text": "Requisitos:\nPara poder seguir la guía, es necesario que ya haya desarrollado una aplicación de shiny. Puede seguir los pasos acá indicados haciendo uso de la aplicación modular que presenté en los webinarios de DataLatam\nAsí mismo es necesario contar con un servidor en el que pueda desplegar la aplicación.\nTambién necesitamos tener conocimiento de git. La guía muestra los pasos haciendo uso de esta herramienta."
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#recomendaciones-del-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#recomendaciones-del-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "Recomendaciones del servidor:",
    "text": "Recomendaciones del servidor:\nSi queremos probar, lo ideal es usar un servidor con el mínimo posible. Conforme nuestra aplicación crezca y querramos que sea usada por más usuarios podemos revisar:\n\nmemoria\nCPU\ndisco\n\nEl sistema operativo puede ser cualquiera de su elección siempre y cuando sea Linux. Los pasos en esta guía están basados en la distribución Ubuntu mayor a 18.04.4. Validar que elegimos LTS (Long Term Support)"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#instalando-r-en-el-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#instalando-r-en-el-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "1- Instalando R en el servidor:",
    "text": "1- Instalando R en el servidor:\nPara evitar inconvenientes de versiones desactualizadas de R, podemos seguir las siguientes instrucciones:\n\n# Agregamos llave\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \n\n# Agregamos repositorio\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/'\n \n# Si estamos con ubuntu 20 el repositorio es:\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n# Si queremos remover el repo no hacerlo a mano y usar el siguiente:\nsudo add-apt-repository --remove 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n# Actualizamos paquetes Ubuntu\nsudo apt update\n\n# Instalamos R\nsudo apt install r-base\n\n# Verificamos que versión de R sea la 4.0.1 (o las más actualizado al momento\n# de la instalación) \nR --version"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#instalando-librerías-linux-comunes-para-r-en-el-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#instalando-librerías-linux-comunes-para-r-en-el-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "2- Instalando librerías linux comunes para R en el servidor",
    "text": "2- Instalando librerías linux comunes para R en el servidor\n\nsudo apt install libxml2-dev\nsudo apt install libssl-dev \nsudo apt install libcurl4-gnutls-dev \nsudo apt-get install unixodbc unixodbc-dev\n\nLuego tomamos un paso para asegurarnos que todos los paquetes de Ubuntu se encuentren actualizados en el servidor\n\nsudo apt update\nsudo apt upgrade\nsudo apt autoremove"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#instalando-shiny-server",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#instalando-shiny-server",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "3- Instalando shiny server",
    "text": "3- Instalando shiny server\nAntes de iniciar con la instalación de shiny server, debemos de instalar el paquete de R shiny:\n\nsudo su - \\\n-c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\"\n\nPara seguir la instalación de shiny server primero hay que instalarle a la máquina gdebi\n\nsudo apt-get install gdebi-core\n\nLuego en la pagina de shiny server copiamos la direccion de donde tienen la última version.\nDebemos de asegurarnos de obtener la versión más actualizada. La instrucción acá mostrada puede quedar desactualizada.\nLa versión la validamos con el número que aparece luego de la palabra shiny-server En este caso, la usada para la guía es (shiny-server-1.5.13.944)\n\n# Damos dirección de donde traemos la descarga\nwget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.13.944-amd64.deb\n\n# Procedemos con la instalación\nsudo gdebi shiny-server-1.5.13.944-amd64.deb\n\nUna vez instalado podemos revisar el estado de shiny-server:\n\nsudo systemctl status shiny-server\n\nPare reiniciar el servidor de shiny cuando tenemos problema:\n\nsudo systemctl restart shiny-server \n\nUna vez que tenemos instalado shiny-server,vamos a revisar por la puerta que está sirviendo. Podemos tomar la dirección IP externa del servidor, copiarla en el navegador (yo tengo preferencia por firefox) y de seguido escribimos : y la puerta 3838 (Por defecto, la que sirve shiny)\n\nip_externa_del_servidor:3838\n\nSi no tenemos un servicio disponible (no vemos una página funcionando) debemos de revisar las reglas firewall del servidor e indicarle la salida del app."
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#llevando-la-aplicación-al-servidor",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#llevando-la-aplicación-al-servidor",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "4- Llevando la aplicación al servidor",
    "text": "4- Llevando la aplicación al servidor\nA este punto tenemos nuestro servidor con R instalado, con shiny-server funcionando y las principales librerías linux para usar con una aplicación de shiny. Ahora el paso que sigue es llevar nuestra aplicación de shiny al servidor.\nEs aquí donde usaremos git. Lo haremos con mi aplicación de ejemplo que se encuentra en github\nDentro del servidor, las aplicaciones deben de estar bajo el siguiente directorio:\n/srv/shiny-server\nAllí es donde debemos de llevar nuestra aplicación.\n\n# Nos cambiamos al directorio\ncd /srv/shiny-server\n\n# Clonamos el repositorio que contiene la aplicación\ngit clone https://github.com/ronnyhdez/shiny_modular.git\n\nLuego, necesitamos instalar en el servidor los paquetes que son necesarios para nuestra aplicación. Todos aquellos paquetes que hayamos usado necesitamos incluirlos. Si dejamos alguno por fuera es muy probable que nuestra aplicación no levante. (Es el error más común que cometo)\nHay dos maneras de realizar este paso. Uno es dando el comando desde bash y el otro es abrir una sesión de R como usuario root e instalarlo tal cual lo haríamos en una sesión de R en nuestro computador:\n\n# Con comando de bash\nsudo su - \\\n-c \"R -e \\\"install.packages(c('shiny', 'tm', 'SnowballC', 'wordcloud',\n'shinydashboard', 'RColorBrewer', 'ggplot2', 'purrr', 'nycflights13', 'dplyr'), repos='https://cran.rstudio.com/')\\\"\"\n\nSi hay algún paquete que no está en el CRAN porque es una versión en desarrollo, podemos echar mano del paquete remotes (el cual debimos de incluir en el paso anterior)\n\n# Ejemplo de instalación de paquete en desarrollo:\nsudo su - \\\n-c \"R -e \\\"remotes::install_github(\"datastorm-open/shinymanager\", \nforce = TRUE)"
  },
  {
    "objectID": "posts/2021-12-11-desplegando-shiny/index.html#levantando-la-aplicación",
    "href": "posts/2021-12-11-desplegando-shiny/index.html#levantando-la-aplicación",
    "title": "Desplegando mi app de shiny con shiny-server",
    "section": "5- Levantando la aplicación",
    "text": "5- Levantando la aplicación\nCon todos los pasos anteriores listos, procedemos a detener y volver a iniciar el servicio de shiny-server, para luego probar si nos podemos conectar a ella:\n\n# Reiniciar el servicio de manera recomendada:\nsudo systemctl stop shiny-server\nsudo systemctl start shiny-server\n\n# Revisar status del servicio\nsudo systemctl status shiny-server\n\nSi el servicio está activo, podemos probar con la IP externa, la puerta 3838 e indicamos el nombre de la aplicación. Debería de ser algo similar a: ip:3838/shiny_modular/\n¡Y listo! Con esto tenemos los pasos básicos para desplegar nuestra aplicación de shiny en nuestro servidor y hacerla disponible al mundo.\n\nReferencias\nEl resumen de pasos mostrados en esta guía han sido tomados y adaptados de diversas fuentes como:\nDigitalOcean (Algún día lograré documentar como lo hacen ellos)\nShiny Server Professional v1.5.15 Administrator’s Guide El sitio a visitar cuando hay problemas con shiny-server. Es documentación técnica"
  },
  {
    "objectID": "posts/2022-09-14-package-citation-zotero/packages_citation_zotero.html",
    "href": "posts/2022-09-14-package-citation-zotero/packages_citation_zotero.html",
    "title": "Packages citation and zotero",
    "section": "",
    "text": "Why?\nWhen working on your research project, probably you will need to cite the R packages used in your data analysis. Also, probably you use Zotero as your reference manager, so, how can you manage the R packages references in Zotero?\nWell, here I will show you one manual way to do it.\n\n\nObtain the package citation\nThis one is easy. You just use the function `citation(“dplyr”) and in your console will appear all the bibliographic info from that package.\n\ncitation(\"dplyr\")\n\n\nTo cite package 'dplyr' in publications use:\n\n  Wickham H, François R, Henry L, Müller K (2022). _dplyr: A Grammar of\n  Data Manipulation_. R package version 1.0.9,\n  <https://CRAN.R-project.org/package=dplyr>.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {dplyr: A Grammar of Data Manipulation},\n    author = {Hadley Wickham and Romain François and Lionel Henry and Kirill Müller},\n    year = {2022},\n    note = {R package version 1.0.9},\n    url = {https://CRAN.R-project.org/package=dplyr},\n  }\n\n\nNow, you need to pay attention on the section that says: A BibTeX entry for LaTeX users is\n\n\nCreating the BibTex file\nFrom where the @ starts, that’s what you need. So, copy (be aware of selecting the last } line) and paste it in a text file. This can be your Text Editor in ubuntu, Notepad, notes or even a Text File in your RStudio.\nYou can copy and paste as many references you need. It can look something like this:\n@Article{,\n  title = {{weathercan}: {D}ownload and format weather data from Environment and Climate Change Canada},\n  author = {Stefanie E LaZerte and Sam Albers},\n  journal = {The Journal of Open Source Software},\n  volume = {3},\n  number = {22},\n  pages = {571},\n  year = {2018},\n  url = {https://joss.theoj.org/papers/10.21105/joss.00571},\n}\n\n@Manual{,\n title = {R: A Language and Environment for Statistical Computing},\n author = {{R Core Team}},\n organization = {R Foundation for Statistical Computing},\n address = {Vienna, Austria},\n year = {2021},\n url = {https://www.R-project.org/},\n}\n\n@Manual{,\n  title = {dplyr: A Grammar of Data Manipulation},\n  author = {Hadley Wickham and Romain François and Lionel Henry and Kirill Müller},\n  year = {2022},\n  note = {R package version 1.0.9},\n  url = {https://CRAN.R-project.org/package=dplyr},\n}\nSave it with the extention .bib:\n\n\n\nImporting the file in Zotero\nOpen Zotero and look for the option import. It will open a window.\n\nSelect the option (BibTex, RIS, Zotero RDF, etc.) and from there, look the file in the path you saved. Open the file and a new window will pop up. The options to select there are up to you:\n\nFinally, you will see that you have the references imported to Zotero!\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{a.hernandezmora2022,\n  author = {Ronny A. Hernandez Mora and Erick Calderon Morales},\n  title = {Packages Citation and Zotero},\n  date = {2022-09-14},\n  url = {https://ronnyale.com//packages_citation_zotero.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonny A. Hernandez Mora, and Erick Calderon Morales. 2022.\n“Packages Citation and Zotero.” September 14, 2022. https://ronnyale.com//packages_citation_zotero.html."
  },
  {
    "objectID": "posts/2023-03-30-new-workflow-drawer/new_worflow_drawer.html",
    "href": "posts/2023-03-30-new-workflow-drawer/new_worflow_drawer.html",
    "title": "A workflow for taking notes",
    "section": "",
    "text": "The story behind my note taking workflow\nOne of the advices out there to learn anything is to take notes. When it comes to learning coding and dev tools, it can be a little bit complicated given that we may need to document code, run small examples and obtain the output to make sense of our notes and explanaitons on why something works or not. During my career as a data professional, I found myself taking notes on anything that I easily have access: a piece of paper on my desk, a .txt file that I just opened, a wiki in some repositories, documenting on issues, on my notebook etc. Suddenly, when a problem comes again during my journey, I got the feeling of “uhmm, I solved this some time ago and I think I took notes. Where are they?” And at that point, I was spending more time trying to find out where those specific notes were, instead of solving the problem (again, as if it were something new)\nBecause of this, I tried to organized myself better, but it wasn’t after several iterations that I found a way that nowadays I feel comfortable with. I started with forcing myself to just take notes on .txt files and classifyng them in folders with specific titles according to the type of problem/issue/topic. It was fine: easy access, simple notes that I could take from the terminal or a text editor that wasn’t overcrowded with seven thousand bottoms with options and also with a black background.\nBut at some point, I had many notes and it was kind of hard to keep track of topics, code, solutions etc. I was lost again on my own notes when I needed to retrieve information that my brain remembered vaguely. Some topics were too similar, sometimes I had notes where it didn’t correspond and I was loosing time trying to find something that I annotated in the past.\nI needed a new solution. But at this point I knew already a couple of things that I wanted:\n\nsimple plain text.\nEasy to open\nWith something to make a search easy and effective.\n\nYou can be asking yourself why not to use just something like obsidian, goodnotes, evernote, etc. Well, my biggest fear with external applications is that I loose control over my own notes. I need to feel that the notes I take belog to me and also I can have my own git repository to keep track of changes and a backup of the history of those changes.\nNow, most of my notes contained code and sometimes I wanted to include screenshots. Well, I was already using Rmarkdown for other projects, and this could be one solution. Also, I already had this blog but the notes that I include here are more elaborated than my raw notes, those that I usually take on a piece of paper and put them on my desk drawer. On my search of something that could help me with this, a talk by Frans on DataLatam about MkDocs and Python gave me the idea to take this as a system to manage my notes. What called my attention was that the documents can be written in markdown, published as a web page and there you will have a search bar that can go through all the notes! With this in mind, I decided to create a couple of functions in R that allowed me to create .Rmd files with notes and transform them to .md files that were going to be published with GitHub pages. I put those functions inside an R package that I called Dockmaker Suddenly, more ideas came to my mind. Also, I started using other tools like nvim (and the plugin for R nvim-r), quarto and I needed to update my workflow. With some work on my tools settings I was able to create a set of few steps that allows me to quickly open a new file, write my notes and publish them to my webpage of raw notes called drawer. When I need to retrieve quickly some information from my notes, I have indices and a search bar.\n\n\nThe workflow\nSo, how do I take notes nowadays? Well, basically I have a repository where I keep all my notes, and some bash aliases as a shortcut to start a new document. This are the steps I follow: - I need to write something so in my terminal I write dw. Short for “document write”, that executes the following bash command: cd Documents/repos/github/drawer; nvim new_file.md - I have an nvim session open. I start writting my notes with markdown formatting. - I’m done, have had to learn R, GCP, Linux\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{a.hernandezmora2023,\n  author = {Ronny A. Hernandez Mora},\n  title = {A Workflow for Taking Notes},\n  date = {2023-05-09},\n  url = {https://ronnyale.com//new_worflow_drawer.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonny A. Hernandez Mora. 2023. “A Workflow for Taking\nNotes.” May 9, 2023. https://ronnyale.com//new_worflow_drawer.html."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R, Linux and other stuff",
    "section": "",
    "text": "A workflow for taking notes\n\n\n\nNeovim\n\n\nLinux\n\n\nmarkdown\n\n\nquarto\n\n\nrmarkdown\n\n\ndocmaker\n\n\n\nA workflow for taking notes with version control and tools such as markdown, Rmarkdown and Quarto.\n\n\n\nRonny A. Hernandez Mora\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing R with Neovim\n\n\n\nNeovim\n\n\nLinux\n\n\nR\n\n\n\nNotes on how to configure Neovim to use it as an IDE for R plus the most used commands and functionalities\n\n\n\nRonny A. Hernandez Mora\n\n\nFeb 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPackages citation and zotero\n\n\n\nR packages\n\n\nZotero\n\n\n\nA manual way to create the BibTex citations and export it to Zotero\n\n\n\nRonny A. Hernandez Mora, Erick Calderon Morales\n\n\nSep 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Neovim for R Users\n\n\n\nNeovim\n\n\nLinux\n\n\n\nAre you an R User who wants to try nvim?\n\n\n\nRonny A. Hernandez Mora\n\n\nSep 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a website using mkdocs, Rmarkdown and GitHub pages\n\n\n\nMkDocs\n\n\nLinux\n\n\n\nA posible solution for note takers (and those who need to organize your documentation) with mkdocs and Rmarkdown.\n\n\n\nRonny A. Hernandez Mora\n\n\nJan 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsando tmux: apuntes breves de mi jornada\n\n\n\ntmux\n\n\nLinux\n\n\n\nBreves notas sobre el uso de tmux. Adecuado para mirar de manera rápida alguna instrucción que necesitemos para continuar con nuestro flujo de trabajo.\n\n\n\nRonny A. Hernandez Mora\n\n\nJan 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesplegando mi app de shiny con shiny-server\n\n\n\nShiny\n\n\nLinux\n\n\n\nVamos a “llevar a internet” nuestra aplicación y hacerla accesible al mundo.\n\n\n\nRonny A. Hernandez Mora\n\n\nDec 28, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTiempo en R\n\n\n\nBase R\n\n\n\nTrabajar con fechas y tiempo en R es un poco complicado. En este post trato de explicar cómo trabajar con este tipo de datos y base R\n\n\n\nRonny A. Hernandez Mora\n\n\nMar 14, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro a datos y estructuras en R\n\n\n\nBase R\n\n\n\nUna breve intro a estructuras en R.\n\n\n\nRonny A. Hernandez Mora\n\n\nFeb 1, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDatos abiertos municipalidad de San José, Costa Rica\n\n\nUna introducción al uso del API de datos abiertos de la muni de San José\n\n\n\nRonny A. Hernandez Mora, Erick Calderon Morales\n\n\nJan 13, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOtra introducción a git\n\n\n\ngit\n\n\n\nUna introducción al control de versiones con git (otra más).\n\n\n\nRonny A. Hernandez Mora\n\n\nApr 20, 2016\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this blog",
    "section": "",
    "text": "A place to find notes about my journey creating data science products\nHi! I’m Ronny A. Hernández Mora. I have been working in the data science industry for several years and I have learned from many people who create free resources over the internet and that also are my friends and co-workers. So I decided to be more serious about sharing tricks and tips about R, linux, git and other tools that I use to create data products.\nFeel free to use and share whatever you find useful in the blog posts!"
  }
]